{"name":"PDL","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/Perl_Data_Language","description":["PDL (which is an acronym for Perl Data Language) is a set of array programming extensions to the Perl programming language which, like Perl, is free software. It is an extension to Perl v5 which is intended for scientific and other data intensive programming tasks. Perl's data structures are intended for small to medium sized analysis tasks: they embody simple data structures and include considerable behind-the-scenes magic for type conversion, variable size, and the like. Numerical tasks such as image processing and computer modeling of physical systems require more structured data, and PDL supplies this need by including more traditional array constructs and additional syntax to describe vector processes. On a computer with both Perl and PDL installed, any Perl script can use the PDL functionality by declaring \"use PDL;\".","PDL is a vectorized array programming language: the expression syntax is a variation on standard mathematical vector notation, so that the user can combine and operate on large arrays with simple expressions. In this respect, PDL follows in the footsteps of the APL programming language, and it has been compared to commercial languages such as MATLAB and Interactive Data Language, and to other free languages such as NumPy and Octave. Unlike MATLAB and IDL, PDL allows great flexibility in indexing and vectorization: for example, if a subroutine normally operates on a 2-D matrix array, passing it a 3-D data cube will generally cause the same operation to happen to each 2-D layer of the cube.","PDL borrows from Perl at least three basic types of program structure: imperative programming, functional programming, and pipeline programming forms may be combined. Subroutines may be loaded either via a built-in autoload mechanism or via the usual Perl module mechanism. PDL-like functionality is being included in the development of Perl 6.","True to the glue language roots of Perl, PDL borrows from several different modules for graphics and plotting support. NetPBM provides image file I\/O (though FITS is supported natively). PLplot, PGPLOT, and Karma modules are all supported for 2-D graphics and plotting applications, and an interface to OpenGL is available for 3-D plotting and rendering.","PDL provides facilities to read and write many open data formats, including JPEG, PNG, GIF, PPM, MPEG, FITS, NetCDF, GRIB, raw binary files, and delimited ASCII tables. PDL programmers can use the CPAN Perl I\/O libraries to read and write data in hundreds of standard and niche file formats.","An installation of PDL usually comes with an interactive shell known as perldl, which can be used to perform simple calculations without requiring the user to create a Perl program file. A typical session of perldl would look something like the following:","The commands used in the shell are Perl statements that can be used in a program with PDL module included. x is an overloaded operator for matrix multiplication, and p in the last command is a shortcut for print.","The core of PDL is written in C. Most of the functionality is written in PP, a PDL-specific metalanguage that handles the vectorization of simple C snippets and interfaces them with the Perl host language via Perl's XS compiler. Some modules are written in FORTRAN, with a C\/PP interface layer. Many of the supplied functions are written in PDL itself. PP is available to the user to write C-language extensions to PDL. There is also an Inline module (Inline::Pdlpp) that allows PP function definitions to be inserted directly into a Perl script; the relevant code is low-level compiled and made available as a Perl subroutine.","The PDL API uses the basic Perl 5 object-oriented functionality: PDL defines a new type of Perl scalar object (eponymously called a \"PDL\", pronounced \"piddle\") that acts as a Perl scalar, but that contains a conventional typed array of numeric or character values. All of the standard Perl operators are overloaded so that they can be used on PDL objects transparently, and PDLs can be mixed-and-matched with normal Perl scalars. Several hundred object methods for operating on PDLs are supplied by the core modules."]}