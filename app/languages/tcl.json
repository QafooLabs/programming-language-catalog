{"name":"Tcl","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/Tcl","description":["Tcl (originally from \"Tool Command Language\", but conventionally spelled \"Tcl\" rather than \"TCL\"; pronounced as \"tickle\" or \"tee-see-ell\") is a scripting language created by John Ousterhout. Originally \"born out of frustration\", according to the author, with programmers devising their own languages intended to be embedded into applications, Tcl gained acceptance on its own. It is commonly used for rapid prototyping, scripted applications, GUIs and testing. Tcl is used on embedded systems platforms, both in its full form and in several other small-footprint versions.","The combination of Tcl and the Tk GUI toolkit is referred to as Tcl\/Tk.","The Tcl programming language was created in the spring of 1988 by John Ousterhout while working at the University of California, Berkeley.","Tcl conferences and workshops are held in both the United States and Europe.","Tcl's features include","Tcl did not originally have object oriented (OO) syntax (8.6 provides an OO system in Tcl core), so OO functionality was provided by extension packages, such as incr Tcl and XOTcl. Even purely scripted OO packages exist, such as Snit and STOOOP (simple tcl-only object-oriented programming).","Safe-Tcl is a subset of TCL that has restricted features. File system access is limited and arbitrary system commands are prevented from execution. It uses a dual interpreter model with the \"untrusted interpreter\" running code in an untrusted script. It was designed by Nathaniel Borenstein and Marshall Rose to include active messages in e-mail. Safe-Tcl can be included in e-mail when the application\/safe-tcl and multipart\/enabled-mail are supported. The functionality of Safe-Tcl has since been incorporated as part of the standard Tcl\/Tk releases.","A Tcl script consists of several command invocations. A command invocation is a list of words separated by whitespace and terminated by a newline or semicolon.","The first word is the name of a command, which is not built into the language, but which is in the library. The following words are arguments. So we have:","Practical example, using the puts command which outputs a string, adding a trailing newline, by default to the stdout channel:","Variables and the results of other commands can be substituted inside strings too, such as in this example where we use set and expr to store a calculation result in a variable, and puts to print the result together with some explanatory text:","There is one basic construct (the command) and a set of simple substitution rules.","Formally, words are either written as-is, with double-quotes around them (allowing whitespace characters to be embedded), or with curly-brace characters around them, which suppresses all substitutions inside (except for backslash-newline elimination). In bare and double-quoted words, three types of substitution occur (once, in a single left-to-right scan through the word):","From Tcl 8.5 onwards, any word may be prefixed by \u201c{*}\u201d to cause that word to be split apart into its constituent sub-words for the purposes of building the command invocation (similar to the \u201c,@\u201d sequence of Lisp's quasiquote feature).","As a consequence of these rules, the result of any command may be used as an argument to any other command. Also, there is no operator or command for string concatenation, as the language concatenates directly. Note that, unlike in Unix command shells, Tcl does not reparse any string unless explicitly directed to do so, which makes interactive use more cumbersome but scripted use more predictable (e.g. the presence of spaces in filenames does not cause difficulties).","The single equality sign (=) for example is not used at all, and the double equality sign (==) is the test for equality, and even then only in expression contexts such as the expr command or the first argument to if. (Both of those commands are just part of the standard library; they have no particularly special place in the library and can be replaced if so desired.)","The majority of Tcl commands, especially in the standard library, are variadic, and the proc (the constructor for scripted command procedures) allows one to define default values for unspecified arguments and a catch-all argument to allow the code to process arbitrary numbers of arguments.","Tcl is not statically typed: each variable may contain integers, floats, strings, lists, command names, dictionaries, or any other value; values are reinterpreted (subject to syntactic constraints) as other types on demand. However, values are immutable and operations that appear to change them actually just return a new value instead.","Tcl interfaces natively with the C language. This is because it was originally written to be a framework for providing a syntactic front-end to commands written in C, and all commands in the language (including things that might otherwise be keywords, such as if or while) are implemented this way. Each command implementation function is passed an array of values that describe the (already substituted) arguments to the command, and is free to interpret those values as it sees fit.","Digital logic simulators often include a Tcl scripting interface for simulating Verilog, VHDL and SystemVerilog hardware languages.","Tools exist (e.g. SWIG, ffidl) to automatically generate the necessary code to connect arbitrary C functions and the Tcl runtime, and Critcl does the reverse, allowing embedding of arbitrary C code inside a Tcl script and compiling it at runtime into a DLL.","The Tcl language has always allowed for extension packages, which provide additional functionality, such as a GUI, terminal-based application automation, database access, and so on. Commonly-used extensions include:",""]}