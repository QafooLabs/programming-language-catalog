{"name":"Miranda","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/Miranda_(programming_language)","description":["Miranda is a non-strict purely functional programming language designed by David Turner as a successor to his earlier programming languages SASL and KRC, using some concepts from ML and Hope. It was produced by Research Software Ltd. of England (which holds a trademark on the name Miranda) and was the first purely functional language to be commercially supported.","Miranda was first released in 1985, as a fast interpreter in C for Unix-flavour operating systems, with subsequent releases in 1987 and 1989. The later Haskell programming language is similar in many ways to Miranda.","Miranda is a lazy, purely functional programming language. That is, it lacks side effects and imperative programming features. A Miranda program (called a script) is a set of equations that define various mathematical functions and algebraic data types. The word set is important here: the order of the equations is, in general, irrelevant, and there is no need to define an entity prior to its use.","Since the parsing algorithm makes intelligent use of layout (indentation), there is rarely a need for bracketing statements and no statement terminators are required. This feature, inspired by ISWIM is also used in occam and Haskell and was later popularized by Python.","Commentary is introduced into regular scripts by the characters || and continue to the end of the same line. An alternative commenting convention affects an entire source code file, known as a \"literate script\", in which every line is considered a comment unless it starts with a > sign.","Miranda's basic data types are char, num and bool. A character string is simply a list of char, while num is silently converted between two underlying forms: arbitrary-precision integers (a.k.a. bignums) by default, and regular floating point values as required.","Tuples are sequences of elements of potentially mixed types, analogous to records in Pascal-like languages, and are written delimited with parentheses:","The list instead is the most commonly used data structure in Miranda. It is written delimited by square brackets and with comma-separated elements, all of which must be of the same type:","List concatenation is ++, subtraction is --, construction is :, sizing is # and indexing is !, so:","There are several list-building shortcuts: .. is used for lists whose elements form an arithmetic series, with the possibility for specifying an increment other than 1:","More general and powerful list-building facilities are provided by \"list comprehensions\" (previously known as \"ZF expressions\"), which come in two main forms: an expression applied to a series of terms, e.g.:","(which is read: list of n squared where n is taken from the list of all positive integers) and a series where each term is a function of the previous one, e.g.:","As these two examples imply, Miranda allows for lists with an infinite number of elements, of which the simplest is the list of all positive integers: [1..]","The notation for function application is simply juxtaposition, as in sin x.","In Miranda, as in most other purely functional languages, functions are first-class citizens, which is to say that they can be passed as parameters to other functions, returned as results, or included as elements of data structures. What is more, a function requiring two or more parameters may be \"partially parameterised\", or curried, by supplying less than the full number of parameters. This gives another function which, given the remaining parameters, will return a result. For example:","is a roundabout way of creating a function \"increment\" which adds one to its argument. In reality, add 4 7 takes the two-parameter function add, applies it to 4 obtaining a single-parameter function that adds four to its argument, then applies that to 7.","Any function taking two parameters can be turned into an infix operator (for example, given the definition of the add function above, the term $add is in every way equivalent to the + operator) and every infix operator taking two parameters can be turned into a corresponding function. Thus:","is the briefest way to create a function that adds one to its argument. Similarly, in","two single-parameter functions are generated. The interpreter understands in each case which of the divide operator's two parameters is being supplied, giving functions which respectively divide a number by two and return its reciprocal.","Although Miranda is a strongly typed programming language, it does not insist on explicit type declarations. If a function's type is not explicitly declared, the interpreter infers it from the type of its parameters and how they are used within the function. In addition to the basic types (char, num, bool), it includes an \"anything\" type where the type of a parameter does not matter, as in the list-reversing function:","which can be applied to a list of any data type, for which the explicit function type declaration would be:","Finally, it has mechanisms for creating and managing program modules whose internal functions are invisible to programs calling those modules.","The following Miranda script determines the set of all subsets of a set of numbers","and this is a literate script for a function primes which gives the list of all prime numbers"]}