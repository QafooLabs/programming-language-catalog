{"name":"Haxe","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/Haxe","description":["Haxe is a versatile open-source high-level multiplatform programming language described on its website as a \"universal language\".","It can produce:","The code can be produced entirely within the Haxe development environment, sometimes requiring Neko, by using a single and unmodified code-base when compiling from one target to the next.","Development of Haxe was started on the October 22, 2005. The first alpha version of Haxe was released on the 14th of November, in the same year. The first beta version was released on the 4th of February, 2006. Haxe 1.0 was released on the 17th of April, in the same year. The current release of Haxe is version 2.10, which was released on July 16, 2012.","Haxe is the \"successor\" to MTASC. Haxe code therefore has much in common with AS3 but with many improvements and output capabilities which puts it in an entirely different category than the Adobe Compilers.","Originally its main advantage was the combination of wide platform-independence and a fully developed high-level language. An increasingly noteworthy advantage is its ability to use such a language to target a device-manufacturer who allows only C++ based code, their own IDE, and very little else.","The Haxe compiler is released under the GNU General Public License version 2.","The name Haxe was chosen because it is short, simple, and \"has an X inside\", which the author humorously asserts is necessary to make any new technology a success. Haxe is pronounced hex in English: \/heks\/, although the authors of the only published book on the language pronounce it \"hacks\").","At the WWX Conference in April 2012 Nicolas Cannasse announced the spelling would be changed from \"haXe\" to \"Haxe\".","The Haxe technology derives its \"universal language\" moniker because of its ability to target different virtual machines supported on a plethora of OS's and devices, as well as the ability to translate the code from a Haxe program into different source-code languages. This strategy of \"compiling\" to multiple source code languages greatly extends its ability to realize the write-once, deploy-everywhere paradigm when compared to compilers that compile directly to different operating systems. It also allows the programmer to choose the best compiler when compiling an executable, use Haxe as a high-level way to quickly create complex components for a lower-level language like C++, as well as further edit and utilize libraries from another IDE.","The Haxe language and libraries are designed to achieve maximal support of these target platforms, and the compiler will emit target source or bytecode depending on the language and options selected.","Current targets:","Using these targets, one can do all the coding for any of the following entirely from within the Haxe\/Neko development environment requiring little if any modifications going from one target to the next:","Since Haxe had its origins in AS3, all of the existing Flash API can be used, although Haxe requires better-formed code and programming standards than Adobe compilers (for example, with regard to scoping and data typing).","Haxe is, like AS3.0, similar to ECMAScript, although almost no ECMAScript code will run on Haxe without modifications. Unlike ECMAScript, Haxe is a compiled language. It is a general-purpose language with object-oriented programming, exceptions, and type inference with class parameters. Generic classes, reflectivity, iterators, and functional programming are built-in functionality of the language and libraries. Unusual among programming languages, Haxe contains a type system which is both strong and dynamic. The compiler will check types implicitly and give compile-time errors, but it also enables the programmer to bypass type-checking and rely on the target platform's dynamic type-handling.","Function parameters can be defined very precisely in Haxe:","Enumerated types are a key feature of the language; they can have parameters of their own and be recursive. They are similar to algebraic data types in languages like ML or Haskell. Enums in Haxe are not simply indexed \"magic-number\" values as in most languages, but are more abstract: they contain no inherent value, but can be instanced into variables as in this example:","(Modified from the Haxe Reference)","Demonstrating Haxe for graphical uses, here is some example code for the Adobe Flash (AS2, i.e. AVM1) target (from the Haxe website):","This will draw a square using a Flash MovieClip object.","The Haxe compiler is implemented in the OCaml language. Because Haxe-generated code runs on virtual machines, no knowledge of OCaml is necessary to develop applications using Haxe. This also means that benchmark performance varies depending on the target platform, as each platform must be customized to make the best use of available features.","One benchmark indicates that Haxe compiles Flash 9 (AVM2) bytecode with better performance than the equivalent AS3 code on Adobe's compiler. Since publication of this benchmark the compiler has further improved performance features with the addition of inline functions and hidden Alchemy opcodes that Flash does not use."]}