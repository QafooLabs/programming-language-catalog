{"name":"Rust","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/Rust_(programming_language)","description":["Rust is an experimental, concurrent, multi-paradigm, compiled programming language developed by Mozilla Labs. It is designed to be practical, supporting pure-functional, concurrent-actor, imperative-procedural, and object-oriented styles.","The lead developer is Graydon Hoare, who began work on the system in 2006; Mozilla became involved in 2009, and officially unveiled the language for the first time at Mozilla Summit 2010. In 2010, work shifted from the initial compiler, written in OCaml, to the self-hosted compiler written in Rust itself. It successfully compiled itself the following year. The self-hosted compiler uses LLVM as its backend.","Version 0.1 of the Rust compiler was completed in January 2012. Mozilla described it as an alpha release, suitable for early adopters and language enthusiasts.","The current version is Rust 0.3.1, released on 20 July 2012.","In keeping with Mozilla policy, Rust is developed in the open, and solicits feedback and contributions from the community.","The Rust wiki states: \u201cThis is alpha-level software with many known bugs, incomplete features and planned future changes. Use at your own risk, expect some instability, disruption and source-level incompatibility for a while yet.\u201d Due to their experimental nature, neither the language nor the compiler have an estimated date for beta release.","The goal of Rust is to be a good language for the creation of large client and server programs that run over the Internet. This has led to a feature set with an emphasis on safety, control over memory layout and concurrency. Performance should be comparable to idiomatic C++.","The syntax of Rust is similar to C and C++, with blocks of code delimited by curly braces, and control-flow keywords such as if, else, do, while, and for. Not all C or C++ keywords are present, however, while others (such as the alt statement for multi-directional branching) will be less familiar to programmers coming from these languages. Despite the syntactic resemblance, Rust is semantically very different from C and C++.","The system is designed to be memory safe, and it does not permit null pointers or dangling pointers. Data values can only be initialized through a fixed set of forms, all of which require their inputs to be already initialized.","The type system supports type classes, inspired directly by the Haskell language. This is a facility for ad-hoc polymorphism, achieved by adding constraints to type variable declarations. Other features from Haskell, such as higher-kinded polymorphism, are not supported.","Rust features type inference, for variables declared with the let keyword. Such variables do not require a value to be initially assigned in order to determine their type. A compile-time error results if any branch of code fails to assign a value to the variable. Type inference does not apply to variables declared within the signature of a function; for example fn fib(n: int) -> int { } cannot be shortened to fn fib(n) -> { }.","Concurrency is supported through lightweight tasks, similar to those found in Erlang and other actor-based languages. In such systems, tasks communicate via message passing, rather than sharing data directly. For performance reasons, it is possible to send data without copying, using unique boxes. Unique boxes are guaranteed to only have one owner, and can be released by the sending task for use by the receiver.","The object system within Rust is based around classes, interfaces and traits. Inheritance and polymorphism is provided by traits and interfaces respectively; classes may not inherit from other classes. Traits provide reusable method implementations that can be mixed in to classes. They may specify the fields of a class they require, but cannot define fields themselves, in order to prevent the diamond inheritance problem of C++. (The design of classes and traits is experimental; interfaces are currently planned to be unified with traits and removed as part of Rust 0.4.)","The following code examples are valid as of Rust 0.3. Syntax and semantics may change in subsequent versions.","Hello world:","Two versions of the factorial function, in both recursive and iterative styles:","Early in its development, Rust prohibited the use of non-ASCII characters in identifiers. A language FAQ argued that in practice most non-English-using programmers used ASCII identifiers for naming variables and functions; however, the limitation drew criticism. A language change in February 2011 removed this restriction.","In addition to conventional static typing, prior to version 0.4 Rust also supported typestates. The typestate system modeled assertions before and after program statements, through use of a special check statement. Discrepancies could be discovered at compile time, rather than once a program was running, as might be the case with assertions in C or C++ code. The typestate concept was not unique to Rust, as it was first introduced in the NIL programming language. Typestates were removed because in practice they found little use."]}