{"name":"ATS","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/ATS_(programming_language)","description":["ATS (Applied Type System) is a programming language whose stated purpose is to support theorem proving in combination with practical programming through the use of advanced type systems. The performance of ATS has been demonstrated to be comparable to that of the C and C++ programming languages. By using theorem proving, and strict type checking, the compiler can detect and prove that its implemented functions are not susceptible to bugs such as division by zero, memory leaks, buffer overflow, and other forms of memory corruption by verifying pointer arithmetic and reference counting before the program compiles.","ATS is derived mostly from the ML and OCaml programming languages. An earlier language, Dependent ML, by the same author has been incorporated by the language.","The primary focus of ATS is to support theorem proving in combination with practical programming. With theorem proving one can prove, for instance, that an implemented function does not produce memory leaks. It also prevents other bugs that might otherwise only be found during testing. It incorporates a system similar to those of proof assistants which usually only aimed at verify mathematical proofs -- except ATS uses this ability to prove that the implementations of its functions operate correctly, and produce the expected output.","As a simple example, in a function using division, the programmer may prove that the divisor will never equal zero, preventing a division by zero error. Let's say, the divisor 'X' was computed as 5 times the length of list 'A'. One can prove, that in the case of a non-empty list, 'X' is non-zero, since 'X' is the product of two non-zero numbers (5 and the length of 'A'). A more practical example would be proving through reference counting that the retain count on an allocated block of memory is being counted correctly for each pointer. Then one can know, and quite literally prove, that the object will not be deallocated prematurely, and that memory leaks will not occur.","The benefit of the ATS system is that since all theorem proving occurs strictly within the compiler, it has no effect on the speed of the executable program. ATS code is often harder to compile than standard C code, but once it compiles the programmer can be certain that it is running correctly to exactly the degree specified by their proofs.","In ATS proofs are separate from implementation, so it is possible to implement a function without proving it if the programmer so desires.","According to the author (Hongwei Xi), ATS's efficiency is largely due to the way that data is represented in the language and tail-call optimizations (which are generally important for the efficiency of functional programming languages). Data can be stored in a flat or unboxed representation rather than a boxed representation.","dataprop expresses predicates as algebraic types","predicates:","in ATS code:","where FACT (int, int) is a proof type","Non tail-recursive factorial with proposition or \"Theorem\" proving through the construction dataprop.","The evaluation of fact1(n-1) returns a pair (proof_n_minus_1 | result_of_n_minus_1) which is used in the calculation of fact1(n). The proofs express the predicates of the proposition.","Part 2 (routines and test):","Compilation (compiles through gcc, without setting up garbage collection unless explicitly stated with -D_ATS_GCATS )","compiles and gives the expected result","With '|' as separator, some functions return wrapped the result value with an evaluation of predicates","","as in case+, val+, type+, viewtype+, ...","Dataviews are often declared to encode recursively defined relations on linear resources.","Datatypes","lists","A dataviewtype is similar to a datatype, but it is linear. With a dataviewtype, the programmer is allowed to explicitly free (or deallocate) in a safe manner the memory used for storing constructors associated with the dataviewtype.","local variables","on stack array allocation:","See val and var declarations"]}