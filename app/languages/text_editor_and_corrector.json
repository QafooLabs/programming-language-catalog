{"name":"TECO","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/Text_Editor_and_Corrector","description":["TECO (\u00a0\/\u02c8ti\u02d0ko\u028a\/; originally an acronym for [paper] Tape Editor and COrrector, but later Text Editor and COrrector) is a text editor originally developed at the Massachusetts Institute of Technology (MIT) in the 1960s, after which it was modified by \"just about everybody\".[citation needed] TECO was a direct ancestor of Emacs, which was originally implemented in TECO macros.","TECO is not only an editor but also an interpreted programming language for text manipulation. Arbitrary programs (called \"macros\") for searching and modifying text give it great power. Unlike regular expressions, however, the language was imperative (though some versions had an \"or\" operator in string search).","TECO does not really have syntax; each character in a program is an imperative command, dispatched to its corresponding routine. That routine may read further characters from the program stream (giving the effect of string arguments), change the position of the \"program counter\" (giving the effect of control structures), or push values onto a value stack (giving the effect of nested parentheses). But there is nothing to prevent operations like jumping into the middle of a comment, since there is no syntax and no parsing.","A classic essay on computer programming, Real Programmers Don't Use Pascal, suggested that a common game for TECO fans was to enter their name as a command sequence, and then try to work out what would happen. The same essay in describing TECO coined the acronym YAFIYGI, meaning \"You Asked For It You Got It\" and thus being the antithesis of WYSIWYG (\"What You See Is What You Get\").","Richard Stallman's now-famous Emacs editor was originally implemented in TECO. Later versions of Emacs, first Multics Emacs and then GNU Emacs, were implemented in Lisp and C\/Emacs Lisp, respectively. TECO became well-known following a Digital Equipment Corporation (DEC) PDP-6 mainframe implementation developed at MIT's Project MAC in 1964. This implementation continuously displayed the edited text visually on a CRT screen, and was used as an interactive online editor (this was, however, neither its origin nor its originally intended mode of use). Later versions of TECO were capable of driving full-screen mode on various DEC RS232 video terminals.","TECO was available for several operating systems and computers, including the PDP-1 computer, the Incompatible Timesharing System (ITS) on the PDP-6 and PDP-10 mainframe, and TOPS-10 and TOPS-20 on the PDP-10. A version of TECO was provided with all DEC operating systems; the version available for RT11 was able to drive the GT40 graphics display while the version available for RSTS\/E was implemented as a multi-user run-time system and could be used as the user's complete operating environment; the user never actually had to exit TECO. The VTEDIT (Video Terminal Editor) TECO macro was commonly used on RSTS\/E and VAX systems with terminals capable of direct-cursor control (e.g. VT52 and VT100) to provide a full-screen visual editor similar in function to the contemporaneously developed Emacs.","Hewlett-Packard, having bought Compaq (who bought Digital Equipment Corporation), still provides TECO with the OpenVMS operating system.","A descendant of the version DEC distributed for the PDP-10 is still available on the Internet, along with several partial implementations for the MS-DOS\/Microsoft Windows environment.","TECO was originally developed at MIT circa 1963 by Daniel L. Murphy for use on two PDP-1 computers, belonging to different departments, both housed in MIT's Building 26. On these machines, the normal development process involved the use of a Friden Flexowriter to prepare source code offline on a continuous strip of punched paper tape. Programmers of the big IBM mainframes customarily punched their source code on cards, using key punches which printed human-readable dot-matrix characters along the top of every card at the same time as they punched each machine-readable character. Thus IBM programmers could read, insert, delete, and move lines of code by physically manipulating the cards in the deck. Punched paper tape offered no such amenities, and necessity was the mother of online editing.","An early editor for the PDP-1 was named \"Expensive Typewriter\". Written by Stephen D. Piner, it was the most rudimentary imaginable line-oriented editor, lacking even search-and-replace capabilities. Its name was chosen as a wry poke at an earlier, rather bloated, editor called \"Colossal Typewriter\". Even in those days, on-line editing could save time in the debugging cycle. Another program written by the PDP-1 hackers was Expensive Desk Calculator, in a similar vein.","The original stated purpose of TECO was to make more efficient use of the PDP-1. As envisioned in the manual, rather than performing editing \"expensively\" by sitting at a console, one would simply examine the faulty text and prepare a \"correction tape\" describing the editing operations to be performed on the text. One would efficiently feed the source tape and the correction tape into the PDP-1 via its high-speed (200 characters per second) reader. Running TECO, it immediately would punch an edited tape with its high-speed (60 characters per second) punch. One could then immediately proceed to load and run the assembler, with no time wasted in online editing.","TECO's then-sophisticated searching operations were motivated by the fact that the offline Flexowriter printouts were not line-numbered; therefore editing locations needed to be specified by context rather than by line number. The various looping and conditional constructs (which made TECO Turing-complete) were included in order to provide sufficient descriptive power for the correction tape. The terse syntax minimized the number of keystrokes needed to prepare the correction tape.","The correction tape was a program, and required debugging just like any other program. The pitfalls of even the simplest global search-and-replace soon became evident. In practice, TECO editing was performed online just as it had been with Expensive Typewriter (although TECO was certainly a more feature-complete editor than Expensive Typewriter, so editing was much more efficient with TECO). The original PDP-1 version had no screen display. The only way to observe the state of the text during the editing process was to type in commands that would cause the text (or portions thereof) to be typed out on the console typewriter.","By 1964, a special Version of TECO (TECO-6) had been implemented on the PDP-6 at MIT. That version supported visual editing, i.e., used a screen display that shows the contents of the editing buffer in real time, updating as it changes. Amongst the creators of TECO-6 were Richard Greenblatt and Stewart Nelson.","At MIT, TECO development continued in the fall of 1971.[citation needed] Carl Mikkelsen had implemented a real-time edit mode loosely based on the TECO-6 graphic console commands, but working with the newly installed Datapoint-3300 CRT text displays. The TECO buffer implementation, however, was terribly inefficient for processing single character insert or delete functions\u2014editing consumed 100% of the PDP-10. With Richard Greenblatt's support, in summer of 1972 Carl reimplemented the TECO buffer storage and reformed the macros as native PDP-10 code.[citation needed] As entering the real-time mode was by typing -R, this was known as control-R mode. At the same time, Rici Liknaitski added input-time macros (-]), which operated as the command string was read rather than when executed.[citation needed] Read-time macros made the TECO auxiliary text buffers, called Q-registers, more useful.[citation needed] Carl expanded the Q-register name space. With read-time macros, a large Q-register name space, and efficient buffer operations, the stage was set for binding each key to a macro. These edit macros evolved into Emacs.[dubious \u2013 discuss]","Given a file named hello.c with the following contents:","one could use the following TECO session (noting that the prompt is \"*\" and \"$\" is how ESC is echoed) to change \"Hello\" into \"Goodbye\":","The obscurity of the TECO programming language is well-described in the following quote from \"Real Programmers Don't Use PASCAL\", a letter from Ed Post to Datamation, July 1983:","According to Craig Finseth, author of The Craft of Text Editing, TECO could be considered to be one of the first \"write-only\" languages. That is, it could be argued that once a program is written in TECO, it would be extremely difficult to comprehend what it did without appropriate documentation.","Despite the odd syntax, the TECO command language was tremendously powerful, and clones are still available for MS-DOS and for Unix.","TECO commands are characters (including control-characters), and the prompt is a single asterisk:","The escape key displays as a dollar sign, pressed once it delineates the end of a command requiring an argument and pressed twice initiates the execution of the entered command(s):","The first two examples are a simple interchange sort of the current text buffer, based on the 1st character of each line, taken from the PDP-11 TECO User's Guide. A \"goto\" and \"structured\" version are shown. Note that TECO ignores case and whitespace (except tab, which is an insertion command).","This example is a Brainfuck interpreter for TECO. It works by executing the buffer as a Brainfuck program, and demonstrates the capabilities of the editor.","This example calculates pi to an arbitrary number of digits.[citation needed]","This article is based in part on the Jargon File, which is in the public domain."]}