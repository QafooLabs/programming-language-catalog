{"name":"G-code","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/G-code","description":["G-code is the common name for the most widely used computer numerical control (CNC) programming language, which has many implementations. Used mainly in automation, it is part of computer-aided engineering. G-code is sometimes called G programming language.","In fundamental terms, G-code is a language in which people tell computerized machine tools what to make and how to make it. The \"what\" and \"how\" are mostly defined by instructions on where to move to, how fast to move, and through what path to move. The most common situation is that a cutting tool is moved according to these instructions, cutting away excess material to leave only the finished workpiece. Non-cutting tools, such as cold-forming tools, burnishing tools, or measuring probes, are also sometimes involved.","The first implementation of numerical control was developed at the MIT Servomechanisms Laboratory in the early 1950s. In the decades since, many implementations have been developed by many (commercial and noncommercial) organizations. G-code has often been used in these implementations. The main standardized version used in the United States was settled by the Electronic Industries Alliance in the early 1960s.[citation needed] A final revision was approved in February 1980 as RS274D. In the world, the standard ISO 6983 is often used, although in varied states of Europe sometimes used other standards, example DIN 66025 or PN-73M-55256, PN-93\/M-55251 in Poland.","Extensions and variations have been added independently by control manufacturers and machine tool manufacturers, and operators of a specific controller must be aware of differences of each manufacturer's product.","One standardized version of G-code, known as BCL, is used only on very few machines.","During the 1970s through 1990s, many CNC machine tool builders attempted to overcome compatibility difficulties by standardizing on machine tool controllers built by Fanuc. Siemens was another market dominator in CNC controls, especially in Europe. In the 2010s, controller differences and incompatibility are not as troublesome because machining operations are developed with CAD\/CAM applications that can output the appropriate G-code for a specific machine tool.","Some CNC machines use \"conversational\" programming, which is a wizard-like programming mode that either hides G-code or completely bypasses the use of G-code. Some popular examples are Southwestern Industries' ProtoTRAK, Mazak's Mazatrol, Hurco's Ultimax, Haas' Intuitive Programming System (IPS), and Mori Seiki's CAPS conversational software.","G-code began as a limited type of language that lacked constructs such as loops, conditional operators, and programmer-declared variables with natural-word-including names (or the expressions in which to use them). It was thus unable to encode logic; it was essentially just a way to \"connect the dots\" where many of the dots' locations were figured out longhand by the programmer. The latest implementations of G-code include such constructs, creating a language somewhat closer to a high-level programming language. The more a programmer can tell the machine what end result is desired, and leave the intermediate calculations to the machine, the more (s)he uses the machine's computational power to full advantage.","G-codes are also called preparatory codes, and are any word in a CNC program that begins with the letter \"G\". Generally it is a code telling the machine tool what type of action to perform, such as:","There are other codes; the type codes can be thought of like registers in a computer.","Some letter addresses are used only in milling or only in turning; most are used in both. Bold below are the letters seen most frequently throughout a program.","Sources: Smid; Green et al.","Sources: Smid; Green et al.","Sources: Smid; Green et al.","This is a generic program that demonstrates the use of G-Code to turn a 1\" diameter X 1\" long part. Assume that a bar of material is in the machine and that the bar is slightly oversized in length and diameter and that the bar protrudes by more than 1\" from the face of the chuck. (Caution: This is generic, it might not work on any real machine! Pay particular attention to point 5 below.)","Several points to note:","G-code's programming environments have evolved in parallel with those of general programming\u2014from the earliest environments (e.g., writing a program with a pencil, typing it into a tape puncher) to the latest environments that stack CAD (computer-aided design), CAM (computer-aided manufacturing), and richly featured G-code editors. (G-code editors are analogous to XML editors, using colors and indents semantically [plus other features] to aid the user in ways that basic text editors can't. CAM packages are analogous to IDEs in general programming.)","Two high-level paradigm shifts have been (1) abandoning \"manual programming\" (with nothing but a pencil or text editor and a human mind) for CAM software systems that generate G-code automatically via postprocessors (analogous to the development of visual techniques in general programming), and (2) abandoning hardcoded constructs for parametric ones (analogous to the difference in general programming between hardcoding a constant into an equation versus declaring it a variable and assigning new values to it at will; and to the object-oriented approach in general). Macro (parametric) CNC programming uses human-friendly variable names, relational operators, and loop structures much as general programming does, to capture information and logic with machine-readable semantics. Whereas older manual CNC programming could only describe particular instances of parts in numeric form, parametric CAM programming describes abstractions which can be flowed with ease into a wide variety of instances. The difference has many analogues, both from before the computing era and from after its advent, such as (1) creating text as bitmaps versus using character encoding with glyphs; (2) the abstraction level of tabulated engineering drawings, with many part dash numbers parametrically defined by the one same drawing and a parameter table; or (3) the way that HTML passed through a phase of using content markup for presentation purposes, then matured toward the CSS model. In all of these cases, a higher layer of abstraction was introduced in order to pursue what was missing semantically.","STEP-NC reflects the same theme, which can be viewed as yet another step along a path that started with the development of machine tools, jigs and fixtures, and numerical control, which all sought to \"build the skill into the tool\". Recent developments of G-code and STEP-NC aim to build the information and semantics into the tool. The idea itself is not new; from the beginning of numerical control, the concept of an end-to-end CAD\/CAM environment was the goal of such early technologies as DAC-1 and APT. Those efforts were fine for huge corporations like GM and Boeing. However, for small and medium enterprises, there had to be an era in which the simpler implementations of NC, with relatively primitive \"connect-the-dots\" G-code and manual programming, ruled the day until CAD\/CAM could improve and disseminate throughout the economy.","Any machine tool with a great number of axes, spindles, and tool stations is difficult to program well manually. It has been done over the years, but not easily. This challenge has existed for decades in CNC screw machine and rotary transfer programming, and it now also arises with today's newer machining centers called \"turn-mills\", \"mill-turns\", \"multitasking machines\", and \"multifunction machines\". Now that CAD\/CAM systems are widely used, CNC programming (such as with G-code) requires CAD\/CAM (as opposed to manual programming) to be practical and competitive in the market segments served by these classes of machines. As Smid says, \"Combine all these axes with some additional features, and the amount of knowledge required to succeed is quite overwhelming, to say the least.\" At the same time, however, programmers still must thoroughly understand the principles of manual programming and must think critically and second-guess some aspects of the software's decisions.","Since about the mid-2000s, the era has finally arrived when \"the death of manual programming\" (that is, of writing lines of G-code without CAM assistance) sometimes seems to be approaching. However, it is currently only in some contexts that manual programming is obsolete. Although it is true that plenty of CAM programming can and does take place nowadays among people who are rusty on, or incapable of, manual programming, it is not true that all CNC programming can be done, or done as well or as efficiently, without being able to speak the language of G-code. Tailoring and refining the CNC program at the machine is an area of practice where it can be easier or more efficient to edit the G-code directly rather than editing the CAM toolpaths and re-post-processing the program."]}