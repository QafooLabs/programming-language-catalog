{"name":"Ratfor","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/Ratfor","description":["Ratfor (short for Rational Fortran) is a programming language implemented as a preprocessor for Fortran 66. It provided modern control structures, unavailable in Fortran 66, to replace GOTOs and statement numbers.","Ratfor provides the following kinds of flow-control statements, described by Kernighan and Plauger as \"shamelessly stolen from the language C, developed for the UNIX operating system by D.M. Ritchie\" (\"Software Tools\", p.\u00a0318):","For example, the following code","might be translated as","The version of Ratfor in Software Tools is itself written in Ratfor, as are the sample programs, and inasmuch as its own translation to Fortran is available, it can be ported to any Fortran system. Ratfor source code file names end in .r or .rat.","It basically took the flow control statements and generated regular fortran which then could be compiled. It allowed you to use structured programming in writing the code.","Ratfor was designed and implemented by Brian Kernighan at Bell Telephone Laboratories in 1974, and described in Software\u2014Practice & Experience in 1975. It was used in the book \"Software Tools\" (Kernighan and Plauger, 1976).","In 1977, at Purdue University, an improved version of the ratfor preprocessor was written. It was called Mouse4, as it was smaller and faster than ratfor. A published document by Dr. Douglas Comer, professor at Purdue, concluded \"contrary to the evidence exhibited by the designer of Ratfor, sequential search is often inadequate for production software. Furthermore, in the case of lexical analysis, well-known techniques do seem to offer efficiency while retaining the simplicity, ease of coding and modularity of ad hoc methods.\" (CSD-TR236).","In comparison to the ratfor preprocessor on a program of 3000 source lines running on a CDC 6500 system took 185.470 CPU seconds. That was cut by 50% when binary search was used in the ratfor code. Rewriting the ad hoc lexical scanner using a standard method based on finite automata reduced run time to 12.723 seconds."]}