{"name":"Batch (Windows\/Dos)","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/Batch_file","description":["In DOS, OS\/2, and also Microsoft Windows, batch file is the name given to a type of script file, a text file containing a series of commands to be executed by the command interpreter.","The commands may be built into the command processor (COPY), supplied with the operating system but not built into it (XCOPY invokes the Microsoft DOS program XCOPY.EXE), or may be any program (cp invokes the program cp.exe if present, an .EXE port of the Unix cp command, with essentially the same functionality as XCOPY.EXE).","Similar to job control language and other systems on mainframe and minicomputer systems, batch files were added to ease the work required for certain regular tasks by allowing the user to set up a script to automate them. When a batch file is run, the shell program (usually COMMAND.COM or cmd.exe) reads the file and executes its commands, normally line-by-line.Unix-like operating systems (such as Linux) have a similar type of file called a shell script.","The filename extension .bat was used in DOS, and the Windows 9x family of operating systems. The Microsoft Windows NT-family of operating systems and OS\/2 added .cmd. Batch files for other environments may have different extensions, e.g. .btm in 4DOS and 4NT related shells.","There have been changes to the detailed handling of batch files; some of the detail in this article is applicable to all batch files, while other details apply only to certain versions.","Brief information on the function and parameters of commands are usually displayed by typing the command at the command prompt followed by \"\/?\" and pressing the Enter key. In some cases \"-?\", \"?\", or just the command name without parameters (if parameters are required) will also elicit information. Some commands ported from Unix require \"--help\".[which?]","In MS-DOS, a batch file can be started from the command line by typing its name followed by any required parameters and pressing the \"enter\" key. When MS-DOS loads, the file AUTOEXEC.BAT is automatically executed, so any commands that need to be run to set up the MS-DOS environment for use could be placed in this file. Computer users would have the autoexec file set up the system date and time, initialize the MS-DOS environment, load any resident programs or device drivers, or initialize network connections and assignments.","In MS-DOS, the extension \".BAT\" identified a file containing commands which could be executed by the command interpreter COMMAND.COM line by line as if it was a list of commands to be entered, with some extra batch-file-specific commands for basic programming functionality, including a GOTO command for changing flow of line execution.","Microsoft Windows was introduced in 1985 as a GUI Operating System alternative to text-based operating and was designed to run on MS-DOS. In order to start it, the WIN command was used and could be added to the end of the AUTOEXEC.BAT file to allow automatic loading of Windows. In the earlier versions one could run a .bat type file from Windows in the MS-DOS Prompt.","Windows was run from MS-DOS and used COMMAND.COM to run .bat files on the following operating systems:","The IBM OS\/2 operating system supported DOS-style batch files. It also included a version of REXX, which was a more advanced batch-file scripting language. IBM and Microsoft started developing this system, but during the construction of it broke up after a dispute; as a result of this, IBM referred to their MS-DOS-like console shell without mention of Microsoft, naming it just DOS, although this seemingly made no difference on the way batch files worked from COMMAND.COM.","OS\/2's batch file interpreter also supports an EXTPROC command. This passes the batch file to the program named on the EXTPROC file as a data file. The named program can be a script file; this is similar to the #! mechanism","Windows versions other than the NT line of operating systems were run from MS-DOS and used the same command interpreter, COMMAND.COM, to execute batch files. However, the operating systems in the Windows NT series run directly from booting the hard drive; they are true operating systems, not graphical user interfaces for underlying MS-DOS. An enhanced 32-bit command processor, cmd.exe, was introduced; it could execute scripts with either the .CMD or .BAT extension. Cmd.exe added additional commands, and implemented existing ones in a slightly different way, so that the same batch file (with different extension) might work differently with cmd.exe and COMMAND.COM. In most cases operation is identical if the few unsupported commands are not used. Cmd.exe's extensions to COMMAND.COM can be disabled for compatibility.","Microsoft released a version of cmd.exe for Windows 9x and ME called WIN95CMD to allow users of older versions of Windows to use certain cmd.exe-style batch files.","As of Windows 8[update], cmd.exe is the normal command interpreter for batch files; the older COMMAND.COM can be run from within a cmd.exe window in 32-bit versions of Windows able to run 16-bit programs.","The only known difference between .cmd and .bat file execution is that in a .cmd file the ERRORLEVEL variable changes even on a successful command that is affected by Command Extensions (when Command Extensions are enabled), whereas in .bat files the ERRORLEVEL variable changes only upon errors.","This example batch file displays \"Hello World!\", prompts and waits for the user to press a key, and terminates.","To execute the file it must be saved with the extension .bat (or .cmd for Windows-NT type operating systems) in plain text format, typically created by using a text editor such as Notepad or a word processor in text mode.","When executed (either from Windows Explorer or Command Prompt) this is displayed:","The interpreter executes each line in turn, starting with the first. The @ symbol at the start of the line turns off the prompt from displaying that command. The command ECHO off turns off the prompt permanently, or until it is turned on again. Then the next line is executed, the ECHO Hello World! command outputs Hello World!, as only off and on have special functions. Then the next line is executed, the PAUSE command displays Press any key to continue . . . and pauses the script's execution until a key is pressed, when the script terminates as there are no more commands. In Windows, if the script is run within a Command Prompt window, the window remains open at the prompt as in MS-DOS, otherwise the command prompt windows closes on termination (unless the batch file has a command to prevent this).","When doing conditions with IF command, batch commands can use:","","Variable expansions are substituted textually into the command, and thus variables which contain nothing simply disappear from the syntax, and variables which contain spaces turn into multiple tokens. This leads to syntax errors or bugs.","For example:","if\u00a0%foo% is empty, parses as the erroneous construct:","and if\u00a0%foo% contains \"abc def\", then the syntax is also wrong:","The usual way to prevent this problem is to surround variable expansions in quotes so that an empty variable expands into the valid expression IF \"\"==\"bar\" instead of the invalid IF ==bar. The text that is being compared to the variable must also be enclosed in quotes, because the quotes are not special delimiting syntax; these characters represent themselves.","The delayed\u00a0!VARIABLE! expansion available in Windows 2000\/XP\/Vista\/7 may be used to avoid these syntactical errors. In this case, null or multi-word variables will not fail syntactically because the value will be expanded after the IF command is parsed:","This can cause conflicts where a string contains quotation marks, and is to be inserted into another line of text that must also be enclosed in quotation marks:","Under Windows 2000\/XP\/Vista\/7, the solution is to replace all occurrences of one quote characters by three quotes:","Some characters have special meaning to the command line, such as the pipe | character. These cannot be printed as text using the ECHO command unless escaped using the caret ^ symbol:","However, escaping does not work as expected when inserting the escaped character into an environment variable, and the variable ends up containing a live pipe command when merely echoed. It is necessary to escape both the caret itself and the escaped character for the character display as text in the variable:","The delayed\u00a0!VARIABLE! expansion available in Windows 2000\/XP\/Vista\/7 may be used to show special characters stored in environment variables because the variable value will be expanded after the command was parsed:","The PAUSE command halts script activity indefinitely until a key is pressed; small programs and workarounds were written to implement a timed pause. Many workarounds using scripting commands only worked in some environments, depending upon the CHOICE function not available in older command interpreters, PING only available if TCP\/IP was installed, and so on. Simple small programs were readily available; a typical example is the 94-byte WAIT.COM executable; WAIT 5 would wait for 5 seconds, then return control to the script. Most such programs are 16-bit .COM files incompatible with 64-bit Windows, but are not needed since Windows Vista and later introduced the TIMEOUT command.","Normally all printed text automatically has the control characters for \"carriage return\" and \"line feed\" appended to the end of each line.","It does not matter if the two echo commands share the same command line; the CR\/LF codes are inserted to break the output onto separate lines:","A trick discovered with Windows 2000\/XP\/Vista\/7 is to use the special prompt for input to output text without CR\/LF trailing the text. In this example, the CR\/LF does not follow Line 1, but does follow Line 2 and Line 3:","This can be used to output data to a text file without CR\/LF appended to the end:","However, there is no way to inject this stripped CR\/LF prompt output directly into an environment variable.","It is not possible to have a command prompt that uses a UNC file path as the current working directory, like this:","The command prompt requires the use of drive letters to assign a working directory, which makes running complex batch files stored on a server UNC share more difficult. While a batch file can be run from a UNC file path, the working directory will default to \"C:\\windows\\system32\\\"","In Windows 2000\/XP\/Vista\/7, a workaround is to use the PUSHD and POPD command with command extensions. Quoting the help for PUSHD in Windows 7, If Command Extensions are enabled the PUSHD command accepts network paths in addition to the normal drive letter and path. If a network path is specified, PUSHD will create a temporary drive letter that points to that specified network resource and then change the current drive and directory, using the newly defined drive letter. Temporary drive letters are allocated from Z: on down, using the first unused drive letter found.","If not enabled by default, command extensions can be temporarily enabled using the \"\/E:ON\" switch for the command interpreter.","So to run a batch file on a UNC share, assign a temporary drive letter to the UNC share, and use the UNC share as the working directory of the batch file, a Windows shortcut can be constructed that looks like this:","The working directory attribute of this shortcut is ignored.","The following syntax does correctly expand to the path of the current batch script.","Batch files use a DOS character set, as defined by the computer, e.g. Code page 437. The non-ASCII parts of these are incompatible with the Unicode or Windows character sets otherwise used in Windows so care needs to be taken. Non-English file names work only if entered through a DOS character set compatible editor. File names with characters outside this set won't work in batch files.","To get output in Unicode into file pipes from an internal command such as dir, one can use the cmd \/U command. For example cmd \/U \/C dir > files.txt will create a file containing a directory listing with correct Windows characters, in the UTF-16LE encoding.","The cmd.exe command processor that interprets .cmd files is supported in all 32- and 64-bit versions of Windows up to at least the 2011 Windows 8 preview[update]. COMMAND.EXE, which interprets .BAT files, was supported in all 16- and 32-bit versions up to at least Windows 8 preview.","While the more powerful 2006 Windows PowerShell is favored in later versions of Windows that support it, Microsoft was also using .cmd files as far as, at least, Window Server 2008. An example is servermanagercmd.exe which incorporates the entire set of Server Manager functions for Windows Server 2008.","There are other, later and more powerful, scripting languages produced by Microsoft for Windows:","Cross-platform scripting tools including Perl, Python, Ruby and Rexx are available for Windows.","Script files will run if the filename without extension is entered. There are rules of precedence governing interpretation of, say DoThis if several of DoThis.cmd, DoThis.bat, DoThis.exe, etc. exist; by default DoThis.com has highest priority. This default order may be modified in newer operating systems by the user-settable PATHEXT environment variable."]}