{"name":"ML","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/ML_(programming_language)","description":["ML is a general-purpose functional programming language developed by Robin Milner and others in the early 1970s at the University of Edinburgh, whose syntax is inspired by ISWIM. Historically, ML stands for metalanguage: it was conceived to develop proof tactics in the LCF theorem prover (whose language, pplambda, a combination of the first-order predicate calculus and the simply typed polymorphic lambda calculus, had ML as its metalanguage). It is known for its use of the Hindley\u2013Milner type inference algorithm, which can automatically infer the types of most expressions without requiring explicit type annotations.","ML is often referred to as an impure functional language, because it encapsulates side-effects, unlike purely functional programming languages such as Haskell.","Features of ML include a call-by-value evaluation strategy, first-class functions, automatic memory management through garbage collection, parametric polymorphism, static typing, type inference, algebraic data types, pattern matching, and exception handling.","Unlike Haskell, ML uses eager evaluation, which means that all subexpressions are always evaluated. However, lazy evaluation can be achieved through the use of closures. Thus one can create and use infinite streams as in Haskell, but their expression is comparatively indirect.","Today there are several languages in the ML family; the two major dialects are Standard ML (SML) and Caml, but others exist, including F#\u00a0\u00a0\u2014 a language that Microsoft supports for their .NET platform. Ideas from ML have influenced numerous other languages, like Haskell, Cyclone[citation needed], and Nemerle.","ML's strengths are mostly applied in language design and manipulation (compilers, analyzers, theorem provers), but it is a general-purpose language also used in bioinformatics, financial systems, and applications including a genealogical database, a peer-to-peer client\/server program, etc.","ML uses static scoping rules.","The following examples use the syntax of Standard ML. The other most widely-used ML dialect, OCaml, differs in various insubstantial ways.","The factorial function expressed as pure ML:","This describes the factorial as a recursive function, with a single terminating base case. It is similar to the descriptions of factorials found in mathematics textbooks. Much of ML code is similar to mathematics in facility and syntax.","Part of the definition shown is optional, and describes the types of this function. The notation E\u00a0: t can be read as expression E has type t. For instance, the argument n is assigned type integer (int), and fac (n\u00a0: int), the result of applying fac to the integer n, also has type integer. The function fac as a whole then has type function from integer to integer (int -> int). Thanks to type inference, the type annotations can be omitted and will be derived by the compiler. Rewritten without the type annotations, the example looks like:","The function also relies on pattern matching, an important part of ML programming. Note that parameters of a function are not necessarily in parentheses but separated by spaces. When the function's argument is 0 (zero) it will return the integer 1 (one). For all other cases the second line is tried. This is the recursion, and executes the function again until the base case is reached.","This implementation of the factorial function is not guaranteed to terminate, since a negative argument causes an infinite descending chain of recursive calls. A more robust implementation would check for a nonnegative argument before recursing, as follows:","The problematic case (when n is negative) demonstrates a use of ML's exception system.","The function can be improved further by writing its inner loop in a tail-recursive style, such that the call stack need not grow in proportion to the number of function calls. This is achieved by adding an extra, \"accumulator\", parameter to the inner function. At last, we arrive at","The following function \"reverses\" the elements in a list. More precisely, it returns a new list whose elements are in reverse order compared to the given list.","This implementation of reverse, while correct and clear, is inefficient, requiring quadratic time for execution. The function can be rewritten to execute in linear time in the following more efficient, though less easy-to-read, style:","Notably, this function is an example of parametric polymorphism. That is, it can consume lists whose elements have any type, and return lists of the same type."]}