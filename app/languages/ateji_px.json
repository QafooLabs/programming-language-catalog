{"name":"Ateji PX","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/Ateji_PX","description":["Ateji PX is an object-oriented programming language extension for Java. It is intended to facilliate parallel computing on multi-core processors, GPU, Grid and Cloud.","Ateji PX can be integrated with the Eclipse IDE, requires minimal learning of the additional parallel constructs and does not alter the development process.","Each || symbol introduces a parallel branch. Running this program will print either","or","depending on how the parallel branches happen to be scheduled.","The quantification (int i\u00a0: N) creates one parallel branch for each value of i. The effect of this code is to increment all elements of array in parallel. This code is equivalent to","More complex quantifications are possible. The following example quantifies over the upper left triangle of a square matrix:","Code that performs a similar and typically small operation on a large collection of elements is called data parallel, and appears often in high-performance scientific applications. A typical representative of data-parallel languages for the C\/C++ or Fortran ecosystems is OpenMP.","Data parallelism features can also be implemented by libraries using dedicated data structures, such as parallel arrays.","The term task parallelism is used when work can conceptually be decomposed into a number of logical tasks. In this example, tasks are created recursively:","Task parallelism is implemented in languages such as Cilk, and in libraries similar to the fork\/join pair of Unix system calls.","Parallel branches have two ways of communicating; either by concurrently reading and writing shared variables, or by sending explicit messages. The operators ! and ? respectively send and receive a message on a channel.","In this example, two parallel branches communicate via explicit message passing:","A program is said to be data-flow when computation is initiated and synchronized by the availability of data in a flow. A typical example is an adder: it has two inputs, one output, and whenever the two inputs are ready, it sends their sum on the output.","Note the parallel read [ in1\u00a0? value1; || in2\u00a0? value2; ]. It means that the two input values can come in any order. Without it, the code may deadlock if values were coming in the wrong order. This shows that parallel primitives in a programming language are not only about performance, but also about the behavior of programs.","The adder by itself doesn't do anything, since it reacts on input data. It needs to be put in a context where other parts feed input values and read output values. The way to express this is to compose all pieces in a large parallel block:","Anything that can be thought of as a combination of logical gates or electrical circuits can readily be expressed in this way as a data-flow program."]}