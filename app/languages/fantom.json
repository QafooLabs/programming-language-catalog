{"name":"Fantom","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/Fantom_(programming_language)","description":["Fantom is a general purpose object-oriented programming language created by Brian and Andy Frank that runs on the Java Runtime Environment (JRE), JavaScript, and the .NET Common Language Runtime (CLR) (.NET support is considered \"prototype\" status). Its primary design goal is to provide a standard library API that abstracts away the question of whether the code will ultimately run on the JRE or CLR. Like C# and Java, Fantom uses a curly brace syntax. The language supports functional programming through closures and concurrency through the Actor model. Fantom takes a \"middle of the road\" approach to its type system, blending together aspects of both static and dynamic typing.","Fantom's type system is simple by design. All variables are statically typed, as they are in C# and Java. Fantom rejects generic types due to their complexity, but it does have a set of built-in generic types: List, Map, and Func. Fantom can also take on the feel of a dynamically typed language through dynamic calls and automatic downcasting. Fantom has an easy to use reflection API and metaprogramming capabilities.","Fantom is open source under the Academic Free License 3.0 and is available for Windows and Unix-like platforms (including Mac OS X)\".","In Fantom, the unit of deployment is called a pod. Pods take on the role of namespaces, packages, and modules. They are stored as .pod files, which are zip files containing the FCode (the Fantom bytecode), the documentation, and resource files necessary to run the pod. A pod can define any number of types for use in other libraries and applications. A pod name fully qualifies a type name. For example, fwt::Widget is distinct from webapp::Widget. If a pod contains a type named Main, then it can be executed on the command line with: fan ","The Fantom build system can package a set of Pods into a JAR archive through build::JarDist.","Fantom ships with a standard windowing toolkit called the Fantom Widget Toolkit, or FWT for short. Like Fantom, FWT was designed to be portable across several platforms. It is currently implemented on the JVM using the Standard Widget Toolkit as a backend. The Javascript implementation is backed by the canvas element and JavaFX, allowing FWT applications to be run in a web browser. There are plans for a CLR implementation using Windows Forms.","Here is the classic Hello world program written in Fantom:","The original name of the Fantom programming language was Fan, named after the neighborhood where the creators live in Richmond, Virginia. After gaining some popularity members of the community raised concerns about the searchability of the name. In November 2009, the name of the project was officially changed from Fan to Fantom.","Fantom has other useful features:"]}