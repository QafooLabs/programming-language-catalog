{"name":"Erlang","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/Erlang_(programming_language)","description":["Erlang (\u00a0\/\u02c8\u025crl\u00e6\u014b\/ ER-lang) is a general-purpose concurrent, garbage-collected programming language and runtime system. The sequential subset of Erlang is a functional language, with strict evaluation, single assignment, and dynamic typing. It was designed by Ericsson to support distributed, fault-tolerant, soft-real-time, non-stop applications. It supports hot swapping, so that code can be changed without stopping a system.","While threads require external library support in most languages, Erlang provides language-level features for creating and managing processes with the aim of simplifying concurrent programming. Though all concurrency is explicit in Erlang, processes communicate using message passing instead of shared variables, which removes the need for locks.","The first version was developed by Joe Armstrong in 1986. It was originally a proprietary language within Ericsson, but was released as open source in 1998.","The name \"Erlang\", attributed to Bjarne D\u00e4cker, has been understood as a reference to Danish mathematician and engineer Agner Krarup Erlang, and (initially at least) simultaneously as an abbreviation of \"Ericsson Language\".","Erlang was designed with the aim of improving the development of telephony applications. The initial version of Erlang was implemented in Prolog and was influenced by the programming language PLEX used in earlier Ericsson exchanges. According to Armstrong, the language went from lab product to real applications following the collapse of the next-generation AXE exchange named AXE-N in 1995. As a result, Erlang was chosen for the next ATM exchange AXD.","In 1998, the Ericsson AXD301 switch was announced, containing over a million lines of Erlang, and reported to achieve a reliability of nine \"9\"s. Shortly thereafter, Erlang was banned within Ericsson Radio Systems for new products, citing a preference for non-proprietary languages. The ban caused Armstrong and others to leave Ericsson. The implementation was open sourced at the end of the year. The ban at Ericsson was eventually lifted, and Armstrong was re-hired by Ericsson in 2004.","In 2006, native symmetric multiprocessing support was added to the runtime system and virtual machine.","Quoting Mike Williams, one of the three inventors of Erlang:[citation needed]","A factorial algorithm implemented in Erlang:","A sorting algorithm (similar to quicksort):","The above example recursively invokes the function qsort until nothing remains to be sorted. The expression [Front || Front ","A comparison function can be used for more complicated structures for the sake of readability.","The following code would sort lists according to length:","Here again, a Pivot is taken from the first parameter given to qsort() and the rest of Lists is named Rest. Note that the expression","[X || X ","is no different in form from","[Front || Front ","(in the previous example) except for the use of a comparison function in the last part, saying \u201cConstruct a list of elements X such that X is a member of Rest, and Smaller is true\", with Smaller being defined earlier as","fun(A,B) -> A < B end","Note also that the anonymous function is named Smaller in the parameter list of the second definition of qsort so that it can be referenced by that name within that function. It is not named in the first definition of qsort, which deals with the base case of an empty list and thus has no need of this function, let alone a name for it.","Erlang has eight primitive data types:","And two compound data types:","Two forms of syntactic sugar are provided:","Erlang has no method of defining classes, although there are external libraries available.","Erlang's main strength is support for concurrency. It has a small but powerful set of primitives to create processes and communicate among them. Processes are the primary means to structure an Erlang application. Erlang processes loosely follow the communicating sequential processes (CSP) model. They are neither operating system processes nor operating system threads, but lightweight processes[citation needed]. Like operating system processes (but unlike operating system threads) they have no shared state between them. The estimated minimal overhead for each is 300 words; thus many of them can be created without degrading performance: a benchmark with 20 million processes has been successfully performed. Erlang has supported symmetric multiprocessing since release R11B of May 2006.","Inter-process communication works via a shared-nothing asynchronous message passing system: every process has a \u201cmailbox\u201d, a queue of messages that have been sent by other processes and not yet consumed. A process uses the receive primitive to retrieve messages that match desired patterns. A message-handling routine tests messages in turn against each pattern, until one of them matches. When the message is consumed and removed from the mailbox the process resumes execution. A message may comprise any Erlang structure, including primitives (integers, floats, characters, atoms), tuples, lists, and functions.","The code example below shows the built-in support for distributed processes:","As the example shows, processes may be created on remote nodes, and communication with them is transparent in the sense that communication with remote processes works exactly as communication with local processes.","Concurrency supports the primary method of error-handling in Erlang. When a process crashes, it neatly exits and sends a message to the controlling process which can take action. This way of error handling increases maintainability and reduces complexity of code.[citation needed]","The Ericsson Erlang implementation loads virtual machine bytecode which is converted to threaded code at load time. It also includes a native code compiler on most platforms, developed by the High Performance Erlang Project (HiPE) at Uppsala University. Since October 2001 the HiPE system is fully integrated in Ericsson's Open Source Erlang\/OTP system. It also supports interpreting, directly from source code via abstract syntax tree, via script as of R11B-5.","Erlang supports language-level Dynamic Software Updating. To implement this, code is loaded and managed as \"module\" units; the module is a compilation unit. The system can keep two versions of a module in memory at the same time, and processes can concurrently run code from each. The versions are referred to as the \"new\" and the \"old\" version. A process will not move into the new version until it makes an external call to its module.","An example of the mechanism of hot code loading:","For the second version, we add the possibility to reset the count to zero.","Only when receiving a message consisting of the atom 'code_switch' will the loop execute an external call to codeswitch\/1 (?MODULE is a preprocessor macro for the current module). If there is a new version of the \"counter\" module in memory, then its codeswitch\/1 function will be called. The practice of having a specific entry-point into a new version allows the programmer to transform state to what is required in the newer version. In our example we keep the state as an integer.","In practice, systems are built up using design principles from the Open Telecom Platform which leads to more code upgradable designs. Successful hot code loading is a tricky subject; code needs to be written to make use of Erlang's facilities.","In 1998, Ericsson released Erlang as open source to ensure its independence from a single vendor and to increase awareness of the language. Erlang, together with libraries and the real-time distributed database Mnesia, forms the Open Telecom Platform (OTP) collection of libraries. Ericsson and a few other companies offer commercial support for Erlang.","Since the open source release, Erlang has been used by several firms worldwide, including Nortel and T-Mobile. Although Erlang was designed to fill a niche and has remained an obscure language for most of its existence, its popularity is growing due to demand for concurrent services. Erlang has found some use in fielding MMORPG servers.","Erlang is available for many Unix-like operating systems, including Mac OS X, as well as Microsoft Windows.","Projects using Erlang include:"]}