{"name":"Logtalk","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/Logtalk","description":["Logtalk is an object-oriented logic programming language that extends the Prolog language with a feature set suitable for programming in the large. It provides support for encapsulation and data hiding, separation of concerns and enhanced code reuse. Logtalk uses standard Prolog syntax with the addition of a few operators and directives.","Logtalk is distributed under an open source license and can run using ISO-compliant Prolog implementations as the back-end compiler.","Logtalk aims to bring together the advantages of object-oriented programming and logic programming. Object-orientation emphasizes developing discrete, reusable units of software, while logic programming emphasizes representing the knowledge of each object in a declarative way.","As an object-oriented programming language, Logtalk's major features include support for both classes (with optional metaclasses) and prototypes, parametric objects,protocols (interfaces), categories (mixins, aspects, hot patching), multiple inheritance, event-driven programming, high-level multi-threading programming,reflection, and automatic generation of documentation.","For Prolog programmers, Logtalk provides predicate namespaces (supporting both static and dynamic objects), private, protected, and public object predicates, coinductive predicates, separation between interface and implementation, better portability than Prolog modules, simple and intuitive meta-predicate semantics, and lambda expressions.","Logtalk's syntax is based on Prolog:","Defining an object:","Using the object:","Trying to access the private predicate gives an error:","As of October 2011, supported back-end Prolog compilers include B-Prolog, CxProlog, ECLiPSe, GNU Prolog, LeanProlog, Qu-Prolog, SICStus Prolog, SWI-Prolog, XSB, and YAP Prolog. Logtalk allows seamless use of the back-end Prolog compiler libraries from within object and categories.","Logtalk features on-line help, an entity diagram generator tool, a built-in debugger (based on an extended version of the traditional Procedure Box model found on most Prolog compilers), a unit test framework, and is also compatible with selected back-end Prolog profilers and graphical tracers.","Logtalk has been used to process STEP data models used to exchange product manufacturing information. It has also been used to implement a reasoning system that allows preference reasoning and constraint solving."]}