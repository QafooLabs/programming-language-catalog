{"name":"ISWIM","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/ISWIM","description":["ISWIM is an abstract computer programming language (or a family of programming languages) devised by Peter J. Landin and first described in his article The Next 700 Programming Languages, published in the Communications of the ACM in 1966. The acronym stands for \"If you See What I Mean\" (also said to have stood for \"I See What You Mean\", but ISWYM was mistyped as ISWIM[citation needed]).","Although not implemented, it has proved very influential in the development of programming languages, especially functional programming languages such as SASL, Miranda, ML, Haskell and their successors, and dataflow programming languages like Lucid.","ISWIM is an imperative language with a functional core, consisting of a syntactic sugaring of lambda calculus to which are added mutable variables and assignment and a powerful control mechanism \u2014 the J operator. Being based on lambda calculus ISWIM has higher order functions and lexically scoped variables.","The operational semantics of ISWIM are defined using Landin's SECD machine and use call-by-value, that is eager evaluation. A goal of ISWIM was to look more like mathematical notation, so Landin abandoned ALGOL's semicolons between statements and begin ... end blocks and replaced them with the off-side rule and scoping based on indentation.","A notationally distinctive feature of ISWIM is its use of where clauses. An ISWIM program is a single expression qualified by \"where\" clauses (auxiliary definitions including equations among variables), conditional expressions and function definitions. With CPL, ISWIM was one of the first programming languages to use \"where\" clauses.","A notable semantic feature was the ability to define new data types, as a (possibly recursive) sum of products - this was done using a somewhat verbose natural language style description, but apart from notation amounts exactly to the algebraic data types found in modern functional languages. ISWIM variables did not have explicit type declarations and it seems likely (although not explicitly stated in the 1966 paper) that Landin intended the language to be dynamically typed, like LISP and unlike ALGOL; but it is also just possible that he had in mind to develop some form of type inference.","No direct implemention of ISWIM was attempted but Art Evan's PAL and John C. Reynolds' Gedanken captured most of Landin's concepts including powerful transfer-of-control operations. Both of these were dynamically typed. Milner's ML may be considered equivalent to ISWIM without the J operator and with type inference.","Another line of descent from ISWIM is to strip out the imperative features (assignment and the J operator) leaving a purely functional language. It then becomes possible to switch to lazy evaluation. This path led to programming languages SASL, KRC (Kent Recursive Calculator), Hope, Miranda, Haskell, and Clean.","This article is based on material taken from the Free On-line Dictionary of Computing prior to 1 November 2008 and incorporated under the \"relicensing\" terms of the GFDL, version 1.3 or later."]}