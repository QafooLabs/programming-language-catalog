{"name":"Inform","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/Inform","description":["Inform is a programming language and design system for interactive fiction originally created in 1993 by Graham Nelson. Inform can generate programs designed for the Z-code or Glulx virtual machines. Versions 1 through 5 were released between 1993 and 1996. Around 1996, Nelson rewrote Inform from first principles to create version 6 (or Inform 6). Over the following decade, version 6 became reasonably stable and a popular language for writing interactive fiction. In 2006, Nelson released Inform 7 (briefly known as Natural Inform), a completely new language based on principles of natural language and a new set of tools based around a book-publishing metaphor.","All versions of Inform generate files in Z-code (also called story files) from source code. These files can then be run by any Z-code interpreter \u2013 that is, by any program which properly implements the Z-code virtual machine (or Z-machine) specification. The Z-machine was originally developed by Infocom in 1979 for their interactive fiction titles. Because there is at least one such interpreter for nearly every major and minor platform, this means that the same Z-code file can be run on a multitude of platforms with no alterations.","Andrew Plotkin created an unofficial version of Inform 6 that was also capable of generating files for Glulx, a virtual machine he had designed to overcome many of the limitations of the several-decades-old Z-machine. Starting with Inform 6.3, released February 29, 2004, Inform 6 has included official support for both virtual machines, based on Andrew Plotkin's work. Early release of Inform 7 did not support Glulx, but in August 2006 Glulx support was released.","Inform was originally created by Graham Nelson in 1993. In 1996 Nelson rewrote Inform from first principles to create version 6 (or Inform 6). Over the following decade, version 6 became reasonably stable and a popular language for writing interactive fiction.","The Inform 6 system consists of two major components: the Inform compiler, which generates story files from Inform source code, and the Inform library, a suite of software which handles most of the difficult work of parsing the player's text input and keeping track of the world model. The name Inform also refers to the Inform programming language that the compiler understands.","Although Inform 6 and the Z-Machine were originally designed with interactive fiction in mind, a large number of other programs have been developed, including a BASIC interpreter, a LISP tutorial (complete with interpreter), a Tetris game, and a version of the game Snake.","The Inform compiler generates files for the Z-machine or Glulx (also called story files) from Inform 6 source code.","The Inform programming language is object-oriented and procedural. A key element of the language is objects. Objects are maintained in an object tree which lists the parent-child relationships between objects. Since the parent-child relationship is often used to represent location, an object which is the parent of another object is often said to \"hold\" it. Objects can be moved throughout the tree. Typically, top level objects represent rooms and other locations within the game, which may hold objects representing the room's contents, be they physical items, non-player characters, the player's character, or background effects. All objects can hold other objects, so a livingroom object might hold an insurancesaleman object which is holding a briefcase object which contains the insurancepaperwork object.","In early versions of Inform, objects were different from the notion of objects from object-oriented programming, in that there was no such thing as a class. Later versions added support for class definitions and allowed objects to be members of classes. Objects and classes can inherit from multiple classes. Interactive fiction games typically contain many unique objects. Because of this, many objects in Inform do not inherit from any class, other than the \"metaclass\" Object. However, objects very frequently have attributes (boolean properties, such as scenery or edible) that are recognized by the Inform library. In other languages this would normally be implemented via inheritance.","Here is a simple example of Inform 6 source code.","The Inform system also contains the Inform library, which automates nearly all of the most difficult work involved in programming interactive fiction; specifically, it includes a text parser that makes sense of the player's input, and a world model that keeps track of such things as objects (and their properties), rooms, doors, the player's inventory, etc.","The Inform compiler does not require the use of the Inform library. There are several replacement libraries available, such as Platypus and InformATE, a library that codes Inform in Spanish.","Here is an example of Inform source code that makes use of the Inform library. The following description refers to Inform 6. Inform 7 is almost entirely different. The code sample below is usable in Inform 7, but not without special demarcation indicating that it is embedded legacy code.","On April 30, 2006, Graham Nelson announced the beta release of Inform 7 to the rec.arts.int-fiction newsgroup. Inform 7 consists of three primary parts: The Inform 7 IDE with development tools specialized for testing interactive fiction, the Inform 7 compiler for the new language, and \"The Standard Rules\" which form the core library for Inform 7. Inform 7 also relies on the Inform library and Inform compiler from Inform 6. The compiler compiles the Inform 7 source code into Inform 6 source code, which is then compiled separately by Inform 6 to generate Glulx or Z-code story file. Inform 7 also defaults to writing Blorb files, archives which include the Z-code together with optional \"cover art\" and metadata intended for indexing purposes. The full set of Inform 7 tools are currently available for Mac OS X, Microsoft Windows and Linux. The March 25, 2007 release added command line support for Linux, and new releases now include an IDE using the GNOME desktop environment under the GNOME Inform 7 SourceForge project. The language and tools remain under development; the March 25, 2007 release included a number of changes to the language.","Inform 7 was named Natural Inform for a brief period of time, but was later renamed Inform 7. This old name is why the Inform 7 compiler is named \"NI.\"","Inform 7 comes with an integrated development environment (IDE) for Mac OS X, Microsoft Windows and Linux. The Mac OS X IDE was developed by Andrew Hunter. The Microsoft Windows IDE was developed by David Kinder. The Linux IDE (known as GNOME Inform) was developed by Philip Chimento","The Inform 7 IDE includes a text editor for editing Inform 7 source code. Like many other programming editors it features syntax highlighting. It marks quoted strings in one color. Headings of organizational sections (Volumes, Books, Chapters, Parts, and Sections) are bolded and made larger. Comments are set in a different color and made slightly smaller.","The IDE includes a built-in Z-code interpreter. The Mac OS X IDE's interpreter is based on the Zoom interpreter by Andrew Hunter, with contributions from Jesse McGrew[citation needed]. The Microsoft Windows IDE's interpreter is based on WinFrotz.","As a developer tests the game in the built-in interpreter, progress is tracked in the \"skein\" and \"transcript\" views of the IDE. The skein tracks player commands as a tree of branching possibilities. Any branch of the tree can be quickly re-followed, making it possible to retry different paths in a game under development without replaying the same portions of the game. Paths can also be annotated with notes and marked as solutions, which can be exported as text walkthroughs. The transcript, on the other hand, tracks both player commands and the game's responses. Correct responses from the game can be marked as \"blessed.\" On replaying a transcript or a branch of the skein, variations from the blessed version will be highlighted, which can help the developer find errors.","The IDE also provides various indices into the program under development. The code is shown as a class hierarchy, a traditional IF map, a book-like table of contents, and in other forms. Clicking items in the index jumps to the relevant source code.","The IDE presents two side-by-side panes for working in. Each pane can contain the source code being worked on, the current status of compilation, the skein, the transcript, the indices of the source code, a running version of the game, documentation for Inform 7 or any installed extensions to it, or settings. The concept is to imitate an author's manuscript book by presenting two \"facing pages\" instead of a multitude of separate windows.","Notable features include strong bias towards declarative rule-based style of programming and ability to infer types and properties of objects from the way they are used. For example, the statement \"John wears a hat.\" creates a \"person\" called \"John\" (since only people are capable of wearing things), creates a \"thing\" with the \"wearable\" property (since only objects marked \"wearable\" are capable of being worn), and sets John as wearing the hat.","Another notable aspect of the language is direct support for relations which track associates between objects. This includes automatically provided relations, like one object containing another or an object being worn, but the developer can add his own relations. A developer might add relations indicating love or hatred between beings, or to track which characters in a game have met each other.","Inform 7 is a highly domain-specific programming language, providing the writer\/programmer with a much higher level of abstraction than Inform 6, and highly readable resulting source code.","Statements in Inform 7 take the form of complete sentences. Blank lines and indentation are in some places structurally significant. The basic form of an Inform 7 program is as follows:","The following is a reimplementation of the above \"Hello Deductible\" example written in Inform 7. It relies on the library known as \"The Standard Rules\" which are automatically included in all Inform 7 compilations.","Mystery House Possessed (2005), by Emily Short, was the first Inform 7 game released to be public. It was released as part of the \"Mystery House Taken Over\" project.","On March 1, 2006, Short announced the release of three further games:Bronze (an example of a traditional puzzle-intensive game) and Damnatio Memoriae (a follow-up to her award-winning Inform 6 game Savoir-Faire) were joined by Graham Nelson's The Reliques of Tolti-Aph (2006). When the Inform 7 public beta was announced on April 30, 2006, six \"worked examples\" of medium to large scale works were made available along with their source code, including the three games previously released on March 1.","Emily Short's Floatpoint was the first Inform 7 game to take first place in the Interactive Fiction Competition. It also won 2006 XYZZY awards for Best Setting and Best NPCs.Rendition, by nespresso (2007), is a political art experiment in the form of a text adventure game. Its approach to tragedy has been discussed academically by both the Association of Computing Machinery and Cambridge University."]}