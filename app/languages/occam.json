{"name":"occam","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/Occam_(programming_language)","description":["occam is a concurrent programming language that builds on the Communicating Sequential Processes (CSP) process algebra, and shares many of its features. It is named after William of Ockham of Occam's Razor fame.","occam is an imperative procedural language (such as Pascal). It was developed by David May and others at INMOS, advised by Tony Hoare, as the native programming language for their transputer microprocessors, but implementations for other platforms are available. The most widely known version is occam 2; its programming manual was written by Steven Ericsson-Zenith and others at INMOS.","In the following examples indentation and formatting are critical for parsing the code: expressions are terminated by the end of the line, lists of expressions need to be on the same level of indentation. This feature, named the off-side rule, is also found in other languages such as Haskell and Python.","Communication between processes work through named channels. One process outputs data to a channel via \"!\" while another one inputs data with \"?\". Input and output will block until the other end is ready to accept or offer data. Examples (c is a variable):","SEQ introduces a list of expressions that are evaluated sequentially. This is not implicit as it is in most other programming languages. Example:","PAR begins a list of expressions that may be evaluated concurrently. Example:","ALT specifies a list of guarded commands. The guards are a combination of a boolean condition and an input expression (both optional). Each guard for which the condition is true and the input channel is ready is successful. One of the successful alternatives is selected for execution. Example:","This will read data from channels c1 or c2 (whichever is ready) and pass it into a merged channel. If countN reaches 100, reads from the corresponding channel will be disabled. A request on the status channel is answered by outputting the counts to out.","occam 1 (released 1983) was a preliminary version of the language which borrowed from David May's work on EPL and Tony Hoare's CSP. This supported only the VAR data type, which was an integral type corresponding to the native word length of the target architecture, and arrays of only one dimension.","occam 2 is an extension produced by INMOS Ltd in 1987 that adds floating-point support, functions, multi-dimensional arrays and more data types such as varying sizes of integers (INT16, INT32) and bytes.","With this revision, occam became a language capable of expressing useful programs, whereas occam 1 was more suited to examining algorithms and exploring the new language (however, the occam 1 compiler was written in occam 1,[citation needed] so there is an existence proof that reasonably sized, useful programs could be written in occam 1, despite its limitations).","occam 2.1 was the last of the series of occam language developments contributed by INMOS. Defined in 1994, it was influenced by an earlier proposal for an occam 3 language (also referred to as \"occam91\" during its early development) created by Geoff Barrett at INMOS in the early 1990s. A revised Reference Manual describing occam 3 was distributed for community comment, but the language was never fully implemented in a compiler.","occam 2.1 introduced several new features to occam 2, including:","For a full list of the changes see Appendix P of the INMOS occam 2.1 Reference Manual.","occam-\u03c0 is the common name for the occam variant implemented by later versions of KRoC, the Kent Retargetable occam Compiler. The addition of the symbol \"\u03c0\" (pi) to the occam name is an allusion to the fact that KRoC occam includes several ideas inspired by the Pi-calculus. It contains a significant number of extensions to the occam 2.1 compiler, for example:","This article is based on material taken from the Free On-line Dictionary of Computing prior to 1 November 2008 and incorporated under the \"relicensing\" terms of the GFDL, version 1.3 or later."]}