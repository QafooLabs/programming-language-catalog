{"name":"Cola","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/Cola_(programming_language)","description":["Cola is a programming language similar to Java and C# with some higher level features of Perl and Ruby including first-class regular expressions. It can be compiled for the Microsoft .NET CLR or the Parrot virtual machine.","Cola is a compiled language with static type checking, but the designer mixed in some of the features more common to scripting languages like Perl and Ruby. According to the author, after years of using Java and C++ for large projects, and Perl for small to medium ones, there seemed to be no language to fill the gap. Cola is less of a new language \"design\" than a mix of several very powerful languages with the following key principles in mind:","Curly braces and semi-colons at the heart - C++, Java and Perl programmers should be comfortable, whitespace has no effect on the semantics.","Convention over Code - Things that are conventional don't need to be explicit (Java\/C# public keyword on methods)","High signal-to-noise ratio - Use Convention over Code to reduce keyword clutter and improve readability. Don't clutter the expression of an idea with implementation of the idea. Java and C# exhibit this in their arguably poor choice of default scope access of fields and methods, ensuring the source files are riddled with scope access keywords. In practice, the use of the word public dominates Java and C# syntax, based on source code analysis of real-world samples. Cola implements different defaults, plus supports C++ style of scope access sections, as opposed to per-member keywords.","Strings and text processing are top priority - Most programming involves strings and text manipulation. Supporting regular expression dramatically increases the power of a language, but BUILTIN syntax for regular expressions improves the readability. When combined, they increase the productivity of the programmer. In cases of assignment or use of a non-string variable in string, or ambiguous context, Cola will choose to convert to string if a conversion exists, rather than force an explicit cast. A compiler switch can enable strict or warning mode regarding auto-casting.","Scriptlets should be possible - A default class with a static main is not required just to do a small job.","A Hello world program written in three ways:","Rather than name constructors after the class name in the tradition of C++\/Java\/C#, Cola uses \"new\" and \"delete\" for constructor and destructor names, to simplify the appearance of code, improve cut-and-paste productivity.","Cola provides both prefix and postfix array declaration notation, and both static and dynamic arrays. This is a productivity choice by the author, to improve comfort for diverse programmer background (C\/C++ vs Java\/C# style), and to reduce notation (static arrays).","An example of Cola's support for regular expression and matching is given below. First a conventional example that echoes Perl's approach.","Cola includes a more powerful, expressive notation for matching called match aliasing. Simply put, any match expression can declare an object of type match as part of the expression (similar to the spirit of declaring a named iterator with C++ or Java in a for loop: for(int i = 0; i < 100; i++)","For the scope of the if statement, match1 is in scope and can be used for clarity. The advantage to match aliasing is more evident when we have multiple, nested matches.","Cola includes some static type inference via the \"var\" keyword (similar to C#), as well as a shorthand \"new\" notation where the type is inferred from the right side.","Also supported is a virtual constructor, to create objects from another object.","Cola includes a foreach() statement, currently supporting iteration on arrays and the builtin .NET non-generic types in System.Collections, or any class that implements \"IEnumerator GetEnumerator()\". Generic support is underway. Cola foreach() is implemented similar to the C# compiler, generating array iteration code when arrays are used, and using the IEnumerable interface or GetEnumerator() convention.","Use of most of the .NET CLR libraries is currently supported, though with unfinished support for the \"using\" namespace import, the programmer must fully qualify types as of 0.4.","Cola can currently compile against a significant portion of the .NET CLR standard libraries, with noted lack of support for generics, pointer \/ unsafe types and delegates. Full support for these features is planned.","A current alpha version of the Cola compiler for .NET is available via email from the author (Melvin Smith)."]}