{"name":"COBOL","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/COBOL","description":["COBOL (\u00a0\/\u02c8ko\u028ab\u0252l\/) is one of the oldest programming languages. Its name is an acronym for COmmon Business-Oriented Language, defining its primary domain in business, finance, and administrative systems for companies and governments.","The COBOL 2002 standard includes support for object-oriented programming and other modern language features.","The COBOL specification was created by a committee of researchers from private industry, universities, and government during the second half of 1959. The specifications were to a great extent inspired by the FLOW-MATIC language invented by Grace Hopper - commonly referred to as \"the mother of the COBOL language.\" The IBM COMTRAN language invented by Bob Bemer was also drawn upon, but the FACT language specification from Honeywell was not distributed to committee members until late in the process and had relatively little impact. FLOW-MATIC's status as the only language of the bunch to have actually been implemented made it particularly attractive to the committee.","The scene was set on April 8, 1959 at a meeting of computer manufacturers, users, and university people at the University of Pennsylvania Computing Center. The United States Department of Defense subsequently agreed to sponsor and oversee the next activities. A meeting chaired by Charles A. Phillips was held at the Pentagon on May 28 and 29 of 1959 (exactly one year after the Z\u00fcrich ALGOL 58 meeting); there it was decided to set up three committees: short, intermediate and long range (the last one was never actually formed). It was the Short Range Committee, chaired by Joseph Wegstein of the US National Bureau of Standards, that during the following months created a description of the first version of COBOL. The committee was formed to recommend a short range approach to a common business language. The committee was made up of members representing six computer manufacturers and three government agencies. The six computer manufacturers were Burroughs Corporation, IBM, Minneapolis-Honeywell (Honeywell Labs), RCA, Sperry Rand, and Sylvania Electric Products. The three government agencies were the US Air Force, the Navy's David Taylor Model Basin, and the National Bureau of Standards (now National Institute of Standards and Technology). The intermediate-range committee was formed but never became operational. In the end a sub-committee of the Short Range Committee developed the specifications of the COBOL language. This sub-committee was made up of six individuals:","The decision to use the name \"COBOL\" was made at a meeting of the committee held on 18 September 1959. The subcommittee completed the specifications for COBOL in December 1959.","The first compilers for COBOL were subsequently implemented in 1960, and on December 6 and 7, essentially the same COBOL program ran on two different computer makes, an RCA computer and a Remington-Rand Univac computer, demonstrating that compatibility could be achieved.","After 1959 COBOL underwent several modifications and improvements. In an attempt to overcome the problem of incompatibility between different versions of COBOL, the American National Standards Institute (ANSI) developed a standard form of the language in 1968. This version was known as American National Standard (ANS) COBOL.","In 1974, ANSI published a revised version of (ANS) COBOL, containing a number of features that were not in the 1968 version.","In 1985, ANSI published still another revised version that had new features not in the 1974 standard, most notably structured language constructs (\"scope terminators\"), including END-IF, END-PERFORM, END-READ, etc.","The language continues to evolve today. In the early 1990s it was decided to add object-orientation in the next full revision of COBOL. The initial estimate was to have this revision completed by 1997 and an ISO CD (Committee Draft) was available by 1997. Some implementers (including Micro Focus, Fujitsu, Veryant, and IBM) introduced object-oriented syntax based on the 1997 or other drafts of the full revision. The final approved ISO standard (adopted as an ANSI standard by INCITS) was approved and made available in 2002.","Like the C++ and Java programming languages, object-oriented COBOL compilers are available even as the language moves toward standardization. Fujitsu and Micro Focus currently support object-oriented COBOL compilers targeting the .NET framework.","The 2002 (4th revision) of COBOL included many other features beyond object-orientation. These included (but are not limited to):","The specifications approved by the full Short Range Committee were approved by the Executive Committee on January 3, 1960, and sent to the government printing office, which edited and printed these specifications as COBOL 60.","The American National Standards Institute (ANSI) produced several revisions of the COBOL standard, including:","After the Amendments to the 1985 ANSI Standard (which were adopted by ISO), primary development and ownership was taken over by ISO. The following editions and TRs (Technical Reports) have been issued by ISO (and adopted as ANSI) Standards:","From 2002, the ISO standard is also available to the public coded as ISO\/IEC 1989.","Work progresses on the next full revision of the COBOL Standard. Approval and availability was expected early 2010s. For information on this revision, to see the latest draft of this revision, or to see what other works is happening with the COBOL Standard, see the COBOL Standards Website.","COBOL programs are in use globally in governmental and military agencies and in commercial enterprises, and are running on operating systems such as IBM's z\/OS and z\/VSE, the POSIX families (Unix\/Linux etc.), and Microsoft's Windows as well as ICL's VME operating system and Unisys' OS 2200. In 1997, the Gartner Group reported that 80% of the world's business ran on COBOL with over 200 billion lines of code in existence and with an estimated 5 billion lines of new code annually.","Near the end of the twentieth century the year 2000 problem was the focus of significant COBOL programming effort, sometimes by the same programmers who had designed the systems decades before. The particular level of effort required for COBOL code has been attributed both to the large amount of business-oriented COBOL, as COBOL is by design a business language and business applications use dates heavily, and to constructs of the COBOL language such as the PICTURE clause, which can be used to define fixed-length numeric fields, including two-digit fields for years.[citation needed] Because of the clean-up effort put into these COBOL programs for Y2K, many of them have been kept in use for years since then.[citation needed] It should be noted however that while much of the Y2K focus was on COBOL, the fault was not in the design of the language itself, but the design of the applications that were written in COBOL.","COBOL as defined in the original specification included a PICTURE clause for detailed field specification. It did not support local variables, recursion, dynamic memory allocation, or structured programming constructs. Support for some or all of these features has been added in later editions of the COBOL standard. COBOL has many reserved words (over 400), called keywords.","The original COBOL specification supported self-modifying code via the infamous \"ALTER X TO PROCEED TO Y\" statement. X and Y are paragraph labels, and any \"GOTO X\" statements executed after such an ALTER statement have the meaning \"GOTO Y\" instead. Most[citation needed] compilers still support it, but it should not be used in new programs as it was deprecated in COBOL 1985.[citation needed]","COBOL provides an update-in-place syntax, for example","The equivalent construct in many procedural languages would be","This syntax is similar to the compound assignment operator later adopted by C:","The abbreviated conditional expression","is equivalent to","COBOL provides \"named conditions\" (so-called 88-levels). These are declared as sub-items of another item (the conditional variable). The named condition can be used in an IF statement, and tests whether the conditional variable is equal to any of the values given in the named condition's VALUE clause. The SET statement can be used to make a named condition TRUE (by assigning the first of its values to the conditional variable).","COBOL allows identifiers up to 30 characters long. When COBOL was introduced, much shorter lengths (e.g., 6 characters for FORTRAN) were prevalent.","COBOL introduced the concept of copybooks\u2014 chunks of code that can be inserted into a larger program. COBOL does this with the COPY statement, which also allows other code to replace parts of the copybook's code with other code (using the REPLACING ... BY ... clause).","Standard COBOL provides the following data types:","Most vendors provide additional types, such as:","An example of the \"Hello, world\" program in COBOL:","Like any widespread programming language, there are various dialects of COBOL. Some compilers, for example, allow the use of double quotes in addition to standard single quotes:","On an IBM System\/360 running OS\/360 MVT 21.8f, circa 1972 (which predates the tradition of using Hello, world for introductory examples), Hello, world would have been punched onto 80 column cards, containing source code similar to:","The \/\/ lines are JCL steps, surrounding COBOL sequence numbered source code, utilizing the ANS COBOL Compile, Link and Go module COBUCLG. HELLO, WORLD output would have been displayed on the operator's console, and the system printer would detail the run. Lots of details, with the summary output of this run about 12 lines from the bottom of the listing.","In his letter to an editor in 1975 titled \"How do we tell truths that might hurt?\" which was critical of several programming languages contemporaneous with COBOL, computer scientist and Turing Award recipient Edsger Dijkstra remarked that \"The use of COBOL cripples the mind; its teaching should, therefore, be regarded as a criminal offense.\"","In his dissenting response to Dijkstra's article and the above \"offensive statement,\" computer scientist Howard E. Tompkins defended structured COBOL: \"COBOL programs with convoluted control flow indeed tend to 'cripple the mind',\" but this was because \"There are too many such business application programs written by programmers that have never had the benefit of structured COBOL taught well...\"","Additionally, the introduction of OO-COBOL has added support for object-oriented code as well as user-defined functions and user-defined data types to COBOL's repertoire.","COBOL 85 was not fully compatible with earlier versions, resulting in the \"cesarean birth\" of COBOL 85. Joseph T. Brophy, CIO, Travelers Insurance, spearheaded an effort to inform users of COBOL of the heavy reprogramming costs of implementing the new standard. As a result the ANSI COBOL Committee received more than 3,200 letters from the public, mostly negative, requiring the committee to make changes. On the other hand, conversion to COBOL 85 was thought to increase productivity in future years, thus justifying the conversion costs.","COBOL syntax has often been criticized for its verbosity. However, proponents note that this was intentional in the language design, and many consider it one of COBOL's strengths. One of the design goals of COBOL was that non-programmers\u2014managers, supervisors, and users\u2014could read and understand the code. This is why COBOL has an English-like syntax and structural elements\u2014including: nouns, verbs, clauses, sentences, sections, and divisions. Consequently, COBOL is considered by at least one source to be \"The most readable, understandable and self-documenting programming language in use today. [...] Not only does this readability generally assist the maintenance process but the older a program gets the more valuable this readability becomes.\" On the other hand, the mere ability to read and understand a few lines of COBOL code does not grant to an executive or end user the experience and knowledge needed to design, build, and maintain large software systems.","Additionally, traditional COBOL is a simple language with a limited scope of function (with no pointers, no user-defined types, and no user-defined functions), encouraging a straightforward coding style. This has made it well-suited to its primary domain of business computing\u2014where the program complexity lies in the business rules that need to be encoded rather than sophisticated algorithms or data structures. And because the standard does not belong to any particular vendor, programs written in COBOL are highly portable. The language can be used on a wide variety of hardware platforms and operating systems. And the rigid hierarchical structure restricts the definition of external references to the Environment Division, which simplifies platform changes.","Standards:","Reference manuals:","Compilers and other products:","Exhibitions:"]}