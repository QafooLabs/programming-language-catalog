{"name":"Mercury","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/Mercury_(programming_language)","description":["Mercury is a functional logic programming language geared towards real-world applications. It is developed at the University Of Melbourne Computer Science department under the supervision of Zoltan Somogyi. The first version was developed by Fergus Henderson, Thomas Conway and Zoltan Somogyi and was released on April 8, 1995.","Mercury is a purely declarative logic language. It is related to both Prolog and Haskell. It features a strong, static, polymorphic type system, as well as a strong mode and determinism system.","The official implementation, the Melbourne Mercury Compiler, is available for most Unix platforms, including Mac OS X, as well as for Microsoft Windows (in Windows, it requires one of the Cygwin or MinGW toolsets, and can be compiled either with GCC or Microsoft Visual C++).","Mercury is based on the logic programming language Prolog. It has the same syntax, and the same basic concepts such as the SLD resolution algorithm. It can ostensibly be viewed as a pure subset of Prolog with strong types and modes. As such, it is often compared to its predecessor, both in terms of features, and run-time efficiency.","The language is designed with software engineering principles in mind. Unlike the original implementations of Prolog, it has a separate compilation phase, rather than being directly interpreted, which allows a much wider range of errors to be caught before running a program. It features a sophisticated, strict type and mode system, which its authors claim makes it much easier to write robust software. Mercury's module system enables division into self-contained units, a problem for past logic programming languages.","Due to the use of information obtained at compile time (such as type and mode information), programs written in Mercury typically perform significantly faster than equivalent programs written in Prolog. The authors claim that Mercury is the fastest logic language in the world, by a wide margin.","Mercury is a purely declarative language, unlike Prolog, since it lacks \"extra-logical\" Prolog statements such as \"cut\" and imperative I\/O. This enables advanced program optimization, but can make certain programming constructs (such as a switch over a number of options, with a default[dubious \u2013 discuss]) harder to express. (Note that while Mercury does allow impure functionality, it is not necessary in most software, and serves primarily as a way of calling foreign language code. Also, all impure code must be explicitly marked.)","Operations which would typically be impure (such as input\/output) are expressed using pure constructs in Mercury using linear types, by threading a dummy \"world\" value through all relevant code.","Notable programs written in Mercury include the Mercury compiler itself and the Prince XML formatter. Mission Critical IT, a software company, has also been using Mercury since 2000 to develop enterprise applications and its Ontology-Driven software development platform ODASE.","Mercury has several back-ends, which means it is possible to compile Mercury code into the following languages and code-styles:","Production level:","Beta quality:","Alpha quality (may not work well, or even be completely broken):","Past back-ends:","This makes Mercury a useful high-level language for targeting multiple platforms, or for linking with code written using multiple back-ends.","Mercury also has a strong foreign language interface, allowing code in other languages (depending on the chosen back-end) to be linked with Mercury code. The following foreign languages are possible:","Other languages can then be interfaced to by calling them from these languages. However, this means that foreign language code may need to be written several times for the different backends, otherwise portability between backends will be lost.","The most commonly used back-end is the original low-level C back-end. As both C backends are considered production quality, this means that you will not lose a great deal of portability using foreign-language C code.","Hello World:","Calculating the 10th Fibonacci number (in the most obvious way):","The Mercury project has a new 6 monthly release cycle. Releases are named according to the year and month of the release. The current release is 11.07.1 (March 2012). Previously releases were numbered 0.12, 0.13, etc. and the period between stable releases was very large (3 years).","The Mercury project also makes a snapshot release daily. The snapshot release is the latest development snapshot of the system and has all the latest features and bug fixes added to the last stable release."]}