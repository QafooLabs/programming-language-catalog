{"name":"Cyclone","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/Cyclone_(programming_language)","description":["The Cyclone programming language is intended to be a safe dialect of the C language. Cyclone is designed to avoid buffer overflows and other vulnerabilities that are endemic in C programs, without losing the power and convenience of C as a tool for system programming.","Cyclone development was started as a joint project of AT&T Labs Research and Greg Morrisett's group at Cornell in 2001. Version 1.0 was released on May 8, 2006.","Cyclone attempts to avoid some of the common pitfalls of C, while still maintaining its look and performance. To this end, Cyclone places the following limits on programs:","To maintain the tool set that C programmers are used to, Cyclone provides the following extensions:","For a better high-level introduction to Cyclone, the reasoning behind Cyclone and the source of these lists, see this paper.","Cyclone looks, in general, much like C, but it should be viewed as a C-like language.","Cyclone implements three kinds of reference (following C terminology these are called pointers):","The purpose of introducing these new pointer types is to avoid common problems when using pointers. Take for instance a function, called foo that takes a pointer to an int:","Although the person who wrote the function foo could have inserted NULL checks, let us assume that for performance reasons they did not. Calling foo(NULL); will result in undefined behavior (typically, although not necessarily, a SIGSEGV being sent to the application). To avoid such problems, Cyclone introduces the @ pointer type, which can never be NULL. Thus, the \"safe\" version of foo would be:","This tells the Cyclone compiler that the argument to foo should never be NULL, avoiding the aforementioned undefined behavior. The simple change of * to @ saves the programmer from having to write NULL checks and the operating system from having to trap NULL pointer dereferences. This extra limit, however, can be a rather large stumbling block for most C programmers, who are used to being able to manipulate their pointers directly with arithmetic. Although this is desirable, it can lead to buffer overflows and other \"off-by-one\"-style mistakes. To avoid this, the ? pointer type is delimited by a known bound, the size of the array. Although this adds overhead due to the extra information stored about the pointer, it improves safety and security. Take for instance a simple (and na\u00efve) strlen function, written in C:","This function assumes that the string being passed in is terminated by NUL ('\\0'). However, what would happen if char\u00a0buf[]\u00a0=\u00a0{'h','e','l','l','o','!'}; were passed to this string? This is perfectly legal in C, yet would cause strlen to iterate through memory not necessarily associated with the string s. There are functions, such as strnlen which can be used to avoid such problems, but these functions are not standard with every implementation of ANSI C. The Cyclone version of strlen is not so different from the C version:","Here, strlen bounds itself by the length of the array passed to it, thus not going over the actual length. Each of the kinds of pointer type can be safely cast to each of the others, and arrays and strings are automatically cast to ? by the compiler. (Casting from ? to * invokes a bounds check, and casting from ? to @ invokes both a NULL check and a bounds check. Casting from * or ? results in no checks whatsoever; the resulting ? pointer has a size of 1.)","Consider the following code, in C:","This returns an object that is allocated on the stack of the function itoa, which is not available after the function returns. While gcc and other compilers will warn about such code, the following will typically compile without warnings:","Cyclone does regional analysis of each segment of code, preventing dangling pointers, such as the one returned from this version of itoa. All of the local variables in a given scope are considered to be part of the same region, separate from the heap or any other local region. Thus, when analyzing itoa, the compiler would see that z is a pointer into the local stack, and would report an error.","The best example to start with is the classic Hello world program:","Presentations:"]}