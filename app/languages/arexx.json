{"name":"ARexx","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/ARexx","description":["ARexx is an implementation of the REXX language for the Amiga, written in 1987 by William S. Hawes, with a number of Amiga-specific features beyond standard REXX facilities. Like most REXX implementations, ARexx is an interpreted language. Programs written for ARexx are called \"scripts\", or \"macros\"; several programs offer the ability to run ARexx scripts in their main interface as macros.","ARexx can easily communicate with third-party software that implements an \"ARexx port\". Any Amiga application or script can define a set of commands and functions for ARexx to address, thus making the capabilities of the software available to the scripts written in ARexx.","ARexx can direct commands and functions to several applications from the same script, thus offering the opportunity to mix and match functions from the different programs. For example, an ARexx script could extract data from a database, insert the data into a spreadsheet to perform calculations on it, then insert tables and charts based on the results into a word processor document.","ARexx was first created in 1987, developed for the Amiga by William S. Hawes. It is based on the REXX language described by Mike Cowlishaw in the book The REXX Language: A Practical Approach to Programming. ARexx was included by Commodore into AmigaOS 2.0 in 1990. This later version of ARexx follows the official REXX language closely; Hawes was later involved in drafting the ANSI standard for REXX.","ARexx is written in 68000 Assembly, and cannot therefore function at full speed with new PPC CPUs, a version of ARexx has not been rewritten for them and is still missing in MorphOS 3.0. William Hawes is no longer involved in development of Amiga programs because of quarrels in the past with Commodore about the licensing of ARexx,[citation needed] and no other Amiga-related firm is financing new versions of ARexx. Notwithstanding this fact, the existing version of ARexx continues to be used, although it is not distributed with MorphOS.","From the ARexx manual:","ARexx is a programming language that can communicate with other applications. Using ARexx, for example, one could request data from a database application and send it to a spreadsheet application. To support this facility, an application must be \"ARexx compatible\" by being able to receive commands from ARexx and execute them. A database program might have commands to search for, retrieve, and save data \u2014 the MicroFiche Filer database has an extensive ARexx command set. A text editor might have ARexx commands corresponding to its editing command set \u2014 the Textra editor supplied with JForth can be used to provide an integrated programming environment. The AmigaVision multimedia presentation program also has ARexx port built in and can control other programs using ARexx.","ARexx can increase the power of a computer by combining the capabilities of various programs. Because of the popularity of a stand-alone ARexx package, Commodore included it with Release 2 of AmigaDOS.","Like all REXX implementations, ARexx uses typeless data representation. Other programming languages made distinctions between integers, floating point numbers, strings, characters, vectors, etc. In contrast, REXX systems treat all data as strings of characters, making it simpler to write expressions and algorithms. As is often the case in dynamically-scoped languages, variables are not declared before using them, they come into being on their first use.","ARexx scripts benefit from an error handling system which monitors execution and responds accordingly. The programmer can choose to suspend and resume the execution of the program as needed.","The ARexx command set is simple, but in addition to the commands there are the functions of its Amiga reference library (rexxsyslib.library). It is also easy to add other libraries or individual functions. ARexx scripts can also be invoked as functions from other ARexx scripts. Any Amiga program which has an ARexx port built in can share its functions with ARexx scripts.","If end user is using a program which builds animations by joining various bitmap image files but which lacks image processing capabilities, he could write an ARexx script which performs these actions:","EqFiles.rexx is a well known example of a simple ARexx script written to automate repetitive and boring procedures. This script uses the ALeXcompare program to compares files, and then finds all duplicates in a set of files and returns output by highlighting any results in a different color.","One of the main features of ARexx is the fact it could expand the capabilities of the AmigaOS by adding some procedures the OS lacked. For example a simple ARexx program could be written to print a warning message on the screen of the monitor, or play an audio alert signal if a certain Amiga program stops, faults or has finished its scheduled job.","The following script is a minimal ARexx script that displays warnings depending on events that take place."]}