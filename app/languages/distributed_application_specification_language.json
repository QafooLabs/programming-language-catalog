{"name":"DASL","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/Distributed_Application_Specification_Language","description":["The DASL Programming Language (Distributed Application Specification Language) is a high-level, strongly typed programming language originally developed at Sun Microsystems Laboratories between 1999 and 2003 as part of the Ace Project. The goals of the project were to enable rapid development of web-based applications based on Sun's J2EE architecture, and to eliminate the steep learning curve of platform-specific details.","DASL defines an application as a domain model with one or more logical presentation models, where a logical presentation model consists of a choreography of the domain model objects described in a set of forms with attached actions. DASL generates the graphical user interface directly from the logical presentation.","DASL is unique among modern application programming languages in its ability to generate a modern graphic user interface for an application without requiring the programmer to define the user interface explicitly, while allowing the programmer to control the look and feel of the generated graphic user interface.","The DASL language is partially declarative and partially procedural. Description of object\/data structures and persistence, and the description of the logical presentation, are declarative. Basic object constraints and behavior are declarative, while additional object behaviors are specified procedurally as methods. Queries can be defined either declaratively or by writing methods.","The language and development environment are a practical realization of the model-driven architecture (MDA) approach. The programmer uses DASL to produce the platform-independent model or PIM, and the language code generators automatically produce and deploy the platform-specific model or PSM. New PSMs may be introduced by writing new code generators.","A key benefit of the DASL language approach over 3rd generation (3GL) programming languages is that enterprise applications can be specified in a very concise and precise way that expresses the application logic clearly. A small enterprise application in DASL can typically be implemented in 8-10K lines of DASL code, which the DASL compiler then typically translates into 200K lines of Java, XML, SQL, and other implementation artifacts. The 200K line figure is typical of equivalent applications written using 3GLs.","The conciseness of DASL can be seen also in terms of the content of the two representations (DASL vs. the generated application code in Java\/XML\/SQL etc.). Most of the DASL code describes business logic and business processes specific to the application, independent of the deployment middleware, frameworks, and presentation mechanisms. This core business logic typically represents only 2-5% of the generated application code. Thus, writing, understanding, and maintaining the application code is much easier at the DASL level than it is at the level of the generated code, in which the business logic is scattered within various implementation artifacts.","Another advantage of using DASL to write applications, rather than conventional 3rd generation languages and IDEs is that the DASL code is independent of middleware, GUI presentation frameworks, network topology, and other implementation technologies. As new middleware and frameworks are developed and evolve, existing DASL programs can be migrated to them without the need to re-implement them.","For example, the original DASL code generators produced traditional HTML screens. Later, DASL code generators were written to use frameworks such as Apache Struts, and technologies such as JavaScript in the browser, to produce a more interactive experience. Today, new DASL generators being written that produce Rich Internet applications. Existing DASL applications can thus be converted to rich internet applications by recompiling them with the latest code generators.","DASL combines a declarative syntax with a Java-like procedural syntax. The declarative part of the language enables defining applications at a higher level of abstraction than 3rd generation languages such as Java. In DASL, the programmer does not describe inter-process communication between client processes, web servers, application servers, databases, or details of the user interface of the desired application. Rather, the programmer describes the application as a set of related domain objects (including their behavior), and as a set of forms and actions annotated with basic layout properties.","In contrast to highly specialized DSLs, DASL is Turing-complete. The behavior of domain objects can be expressed using a combination of declarative and procedural syntax. For example, constraints on objects and object attributes are expressed declaratively, but the constraint itself can be defined either as a declarative expression or procedurally.","A DASL application has two primary components: A business object specification (BOS) that describes the object domain model, consisting of persistent and transient objects representing the domain of the application, and an application usage specification (AUS) that describes the actions or use cases that may be performed on the domain model. The AUS is essentially the choreography of the domain objects into a series of forms and actions.","The DASL programmer models the graphical user interface of the application by annotating the logical AUS forms and actions with properties that describe the basic layout of the data on the page. Rather than user interface considerations dominating the application specification, in DASL the logical interaction between the user and domain model is central, and the user interface is derived from the logical interaction. It is believed that DASL is unique among other languages in this respect.","The DASL language is described in a published Sun Labs technical report called The DASL Language: Programmer's Guide and Reference Manual.","Around 1999, two Sun researchers, Bruce Daniels and Bob Goldberg, started a research project in Sun Labs called the 'Ace Project', with the goal of simplifying the creation of Java web-based enterprise applications. The Ace language, now known as DASL, was developed by Goldberg, Daniels, and several other colleagues as part of this project.","The Ace project and language were featured in an article that appeared in June, 2002 on Sun's website, as well as in the January 2003 edition of Computing Research News entitled Sun Microsystems Laboratories: License to Innovate.","'Project Ace', the Ace DASL development environment, was demonstrated by Bruce Daniels as part of James Gosling's keynote address at the JavaONE conference in March, 2002.","On the business side of Sun Microsystems, the DASL language was used to implement the public interface to the Sun Grid Compute Utility, known as the GridPortal.","Although Sun Microsystems did not release a commercial implementation of the DASL language, it has in the past made the technology available to selected partners and conducted trials using the technology. DASL is referenced on the Association for Computing Machinery Portal, including a paper presented at the OOPSLA 2004 Conference, in papers on Model-Driven Software Development, and on the Sun\/Oracle website describing Project Ace. A demonstration of Ace DASL was given as part of James Gosling's keynote address at the 2004 Java One Conference.","Research and development on the DASL language continues at RD3 Software. The RD3 language enhancements and code generators for DASL have made the language extensible and have broadened the scope of the language from dynamic HTTP-style web applications to rich internet applications.","The language has been extended so it can define dynamic websites and domain-specific web portals that include cloud applications. For example, the RD3 website is a DASL \"program\".","The RD3 DASL language supports the concept of forms and nested forms as part of the logical presentation. Information and actions can be logically grouped, and the user interface can be controlled using annotations. Presentation and navigation of recursive relationships, such as organization charts and family trees, has been added to the language.","The DASL language has been made extensible. A third party programmer can write a code generator plugin in Java targeted to a specific DASL object class or form, allowing that object or form to be presented using a custom widget. Customized widgets may do computation within the user's browser, so the application presentation produced by DASL is now Turing complete.","DASL is unique among modern application programming languages in its ability to generate a modern graphic user interface for an application without requiring the programmer to define the user interface explicitly. Using simple annotations, the programmer can modify the user interface that is produced by DASL. Using code generator plugins, the programmer can extend DASL to generate a specific desired user interface."]}