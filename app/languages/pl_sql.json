{"name":"PL\/SQL","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/PL\/SQL","description":["PL\/SQL (Procedural Language\/Structured Query Language) is Oracle Corporation's procedural extension language for SQL and the Oracle relational database. PL\/SQL's general syntax resembles that of Ada or Pascal.","PL\/SQL is one of three key programming languages embedded in the Oracle Database, along with SQL itself and Java.","PL\/SQL is available in Oracle Database (since version 7), TimesTen in-memory database (since version 11.2.1), and IBM DB2 (since version 9.7).","PL\/SQL supports variables, conditions, loops and exceptions. Arrays are also supported, though in a somewhat unusual way, involving the use of PL\/SQL collections. PL\/SQL collections is a slightly advanced topic.","Implementations from version 8 of Oracle Database onwards have included features associated with object-orientation.","PL\/SQL program units (essentially code containers) can be compiled into the Oracle database. Programmers can thus embed PL\/SQL units of functionality into the database directly. They also can write scripts containing PL\/SQL program units that can be read into the database using the Oracle SQL*Plus tool.","Once the program units have been stored into the database, they become available for execution at a later time.","While programmers can readily embed Data Manipulation Language (DML) statements directly into their PL\/SQL code using straightforward SQL statements, Data Definition Language (DDL) requires more complex \"Dynamic SQL\" statements to be written in the PL\/SQL code. However, DML statements underpin the majority of PL\/SQL code in typical software applications.","In the case of PL\/SQL dynamic SQL, early versions of the Oracle Database required the use of a complicated Oracle DBMS_SQL package library. More recent versions have however introduced a simpler \"Native Dynamic SQL\", along with an associated EXECUTE IMMEDIATE syntax.","Oracle Corporation customarily extends package functionality with each successive release of the Oracle Database.","Anonymous blocks form the basis of the simplest PL\/SQL code, and have the following structure:","The  and the DECLARE and EXCEPTION sections are optional.","Exceptions, errors which arise during the execution of the code, have one of two types:","User-defined exceptions are always raised explicitly by the programmers, using the RAISE or RAISE_APPLICATION_ERROR commands, in any situation where they have determined that it is impossible for normal execution to continue. RAISE command has the syntax:","Oracle Corporation has pre-defined several exceptions like NO_DATA_FOUND, TOO_MANY_ROWS, etc. Each exception has a SQL Error Number and SQL Error Message associated with it. Programmers can access these by using the SQLCODE and SQLERRM functions.","The DECLARE section defines and (optionally) initialises variables. If not initialised specifically, they default to NULL.","For example:","The symbol := functions as an assignment operator to store a value in a variable.","The major datatypes in PL\/SQL include NUMBER, INTEGER, CHAR, VARCHAR2, DATE, TIMESTAMP, TEXT etc.","Functions in PL\/SQL group together SQL and PL\/SQL statements that perform a task and should return a value or values to the calling environment. User-defined functions are used to supplement the many hundreds of functions built-in by Oracle Corporation.","There are two different types of functions in PL\/SQL. The traditional function has the form:","Pipelined table functions return collections and take the form::","There are three types of parameter: IN, OUT and IN OUT.","Procedures are similar to Functions, in that they can be executed to perform work. The primary difference is that procedures cannot be used in a SQL statement. Another difference is that it can return multiple values. Procedures are traditionally the workhouse of the coding world and functions are traditionally the smaller, more specific pieces of code. PL\/SQL maintains many of the distinctions between functions and procedures found in many general-purpose programming languages, but in addition, functions can be called from SQL, while procedures cannot.","Packages are groups of conceptually linked functions, procedures, variables, PL\/SQL table and record TYPE statements, constants, cursors etc. The use of packages promotes re-use of code. Packages are composed of the package specification and an optional package body. The specification is the interface to the application; it declares the types, variables, constants, exceptions, cursors, and subprograms available. The body fully defines cursors and subprograms, and so implements the spec. Two advantages of packages include:","To define a numeric variable, the programmer appends the variable type NUMBER to the name definition. To specify the (optional) precision(P) and the (optional) scale (S), one can further append these in round brackets, separated by a comma. (\"Precision\" in this context refers to the number of digits which the variable can hold, \"scale\" refers to the number of digits which can follow the decimal point.)","A selection of other datatypes for numeric variables would include: binary_float, binary_double, dec, decimal, double precision, float, integer, int, numeric, real, smallint, binary_integer m","To define a character variable, the programmer normally appends the variable type VARCHAR2 to the name definition. There follows in brackets the maximum number of characters which the variable can store.","Other datatypes for character variables include: varchar, char, long, raw, long raw, nchar, nchar2, clob, blob, bfile","Date variables can contain date and time. The time may be left out, but there is no way to define a variable that only contains the time. There is no DATETIME type. And there is no TIME type. But there is a TIMESTAMP type that can contain fine grained timestamp up to millisecond or nanosecond. Oracle Datatypes","The TO_DATE function can be used to convert strings to date values. The function converts the first quoted string into a date, using as a definition the second quoted string, for example:","or","To convert the dates to strings one uses the function TO_CHAR (date_string, format_string).","PL\/SQL also supports the use of ANSI date and interval literals. The following clause gives an 18-month range:","Variable_name Table_name.Column_name%type;","This syntax defines a variable of the type of the referenced column on the referenced tables.","Programmers specify user-defined datatypes with the syntax:","For example:","This sample program defines its own datatype, called t_address, which contains the fields name, street, street_number and postcode.","So according to the example, we are able to copy the data from the database to the fields in the program.","Using this datatype the programmer has defined a variable called v_address and loaded it with data from the ADDRESS table.","Programmers can address individual attributes in such a structure by means of the dot-notation, thus: \"v_address.street\u00a0:= 'High Street';\"","The following code segment shows the IF-THEN-ELSIF construct. The ELSIF and ELSE parts are optional so it is possible to create simpler IF-THEN or, IF-THEN-ELSE constructs.","The CASE statement simplifies some large IF-THEN-ELSE structures.","CASE statement can be used with predefined selector:","PL\/SQL refers to arrays as \"collections\". The language offers three types of collections:","Programmers must specify an upper limit for varrays, but need not for index-by tables or for nested tables. The language includes several collection methods used to manipulate collection elements: for example FIRST, LAST, NEXT, PRIOR, EXTEND, TRIM, DELETE, etc. Index-by tables can be used to simulate associative arrays, as in this example of a memo function for Ackermann's function in PL\/SQL.","With index-by tables, the array can be indexed by numbers or strings. It's similar to a map in Java, where you have key-value pairs. There is only one dimension and it is unbounded.","With nested tables the programmer needs to understand what is nested. Here, a new type is created that may be composed of a number of components. That type can then be used to make a column in a table, and nested within that column will be those components.","With Varrays you need to understand that the word variable doesn't apply to the size of the array in the way you might think that it would. The size the array is declared with is in fact fixed. The number of elements in the array is variable up to the declared size. Arguably then, variable-sized arrays aren't that variable in size.","As a procedural language by definition, PL\/SQL provides several iteration constructs, including basic LOOP statements, WHILE loops, FOR loops, and Cursor FOR loops.","Syntax: --Harmeet","Loops can be terminated by using the EXIT keyword, or by raising an exception.","This is the output\nOutput:","Cursor-for loops automatically open a cursor, read in their data and close the cursor again.","As an alternative, the PL\/SQL programmer can pre-define the cursor's SELECT-statement in advance in order (for example) to allow re-use or to make the code more understandable (especially useful in the case of long or complex queries).","The concept of the person_code within the FOR-loop gets expressed with dot-notation (\".\"):","PL\/SQL functions analogously to the embedded procedural languages associated with other relational databases. Sybase ASE and Microsoft SQL Server have Transact-SQL, PostgreSQL has PL\/pgSQL (which tries to emulate PL\/SQL to an extent), and IBM DB2 includes SQL Procedural Language, which conforms to the ISO SQL\u2019s SQL\/PSM standard.","The designers of PL\/SQL modelled its syntax on that of Ada. Both Ada and PL\/SQL have Pascal as a common ancestor, and so PL\/SQL also resembles Pascal in numerous aspects. The structure of a PL\/SQL package closely resembles the basic Pascal program structure or a Borland Delphi unit. Programmers can define global data-types, constants and static variables, public and private, in a PL\/SQL package.","PL\/SQL also allows for the definition of classes and instantiating these as objects in PL\/SQL code. This resembles usages in object-oriented programming languages like Object Pascal, C++ and Java. PL\/SQL refers to a class as an \"Abstract Data Type\" (ADT) or \"User Defined Type\" (UDT), and defines it as an Oracle SQL data-type as opposed to a PL\/SQL user-defined type, allowing its use in both the Oracle SQL Engine and the Oracle PL\/SQL engine. The constructor and methods of an Abstract Data Type are written in PL\/SQL. The resulting Abstract Data Type can operate as an object class in PL\/SQL. Such objects can also persist as column values in Oracle database tables.","PL\/SQL is fundamentally distinct from Transact-SQL, despite superficial similarities. Porting code from one to the other usually involves non-trivial work, not only due to the differences in the feature sets of the two languages, but also due to the very significant differences in the way Oracle and SQL Server deal with concurrency and locking.","The Fyracle project aims to enable the execution of PL\/SQL code in the open-source Firebird database.","The StepSqlite product is a PL\/SQL compiler for the popular small database SQLite."]}