{"name":"Nemerle","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/Nemerle","description":["Nemerle is a general-purpose high-level statically typed programming language designed for platforms using the Common Language Infrastructure (.NET\/Mono). It offers functional, object-oriented and imperative features. It has a simple C#-like syntax and a powerful metaprogramming system. In June of 2012, the core developers of Nemerle were hired by the Czech software development company JetBrains. The team is focusing on the development of a project known as \"N2\"; a framework for implementing new and existing programming languages. This framework will likely be used to create future versions of Nemerle.","The language was named after the Archmage Nemmerle, a character in the fantasy novel A Wizard of Earthsea by Ursula K. Le Guin.","","Nemerle's most notable feature is the ability to mix object oriented and functional styles of programming. Programs may be structured using object oriented concepts such as classes and namespaces, while methods can (optionally) be written in a functional style. Other notable features include:","The metaprogramming system allows for a great deal of compiler extensibility, embedding of domain specific languages, partial evaluation, and aspect-oriented programming, taking a high-level approach to lift as much of the burden from the programmer as possible. The language combines all CLI standard features, including parameter polymorphism, lambdas, extension methods etc. Accessing the libraries included in the .NET or Mono platforms is as easy as in C#.","Variants (called data types or sum types in SML and OCaml) are forms of expressing data of several different kinds:","Nemerle's macro system allows for the creation, analysis, and modification of a program's code during the compilation process. Macros can be used in the form of a method call or as a new language construct. Many constructs within the language were implemented using macros (if, for, foreach, while, using etc.).","\"if\" macro example:","Nemerle can be integrated into Visual Studio 2008. Also it has a completely free IDE based on Visual Studio 2008 Shell (like Visual Studio Express Editions) and SharpDevelop (link to plugin source code).","Nemerle can be also integrated into Visual Studio 2010 using the add-in.","The traditional \"Hello World!\" can be implemented in a more C#-like fashion:","or more simply:","Macros allow generation of boilerplate code with additional static checks performed by the compiler. They reduce the amount of code that must be written by hand, make code generation safer, and allow for programmatic generation of code with compiler checks, while keeping source code relatively small and readable.","The string formatting macro simplifies variables to string manipulations using $ notation:","StructuralEquality, Memoize, json, and with are macros which generate code in compile time. Although some of them (StructuralEquality, Memoize) can look like C# attributes, during compile time they will be examined by the compiler and transformed to appropriate code using logic predefined by their macros.","Using Nemerle macros for SQL you can write:","instead of","and this is not just hiding some operations in a library, but additional work performed by the compiler to understand the query string, the variables used there, and the columns returned from the database. The ExecuteReaderLoop macro will generate code roughly equivalent to what you would have to type manually. Moreover, it connects to the database at compilation time to check that your SQL query really makes sense.","With Nemerle macros you can also introduce some new syntax into the language:","defines a macro introducing the ford (EXPR\u00a0; EXPR) EXPR syntax and can be used like","Nemerle can be either embedded directly into ASP.NET:","...Or stored in a separate file and entered with a single line:","Nemerle can take advantage of native platform libraries. The syntax is very similar to C#'s and other .NET languages. Here is the simplest example:"]}