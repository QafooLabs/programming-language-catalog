{"name":"ALGOL 60","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/ALGOL_60","description":["ALGOL 60 (short for ALGOrithmic Language 1960) is a member of the ALGOL family of computer programming languages. It gave rise to many other programming languages, including BCPL, B, Pascal, Simula, C, and many others. ALGOL 58 introduced code blocks and the begin and end pairs for delimiting them. ALGOL 60 was the first language implementing nested function definitions with lexical scope.","Niklaus Wirth based his own ALGOL W on ALGOL 60 before moving to develop Pascal. Algol-W was intended to be the next generation ALGOL but the ALGOL 68 committee decided on a design that was more complex and advanced rather than a cleaned simplified ALGOL 60. The official ALGOL versions are named after the year they were first published.","ALGOL 68 is substantially different from Algol 60 and was criticised partially for being so, so that in general \"Algol\" refers to dialects of Algol 60. The name ALGOL of the family is sometimes given in mixed case (Algol 60), and sometimes in all uppercase (ALGOL 68).","ALGOL 60 - with COBOL - were the first languages to seek standardization.","ALGOL 60 was used mostly by research computer scientists in the United States and in Europe. Its use in commercial applications was hindered by the absence of standard input\/output facilities in its description and the lack of interest in the language by large computer vendors. ALGOL 60 did however become the standard for the publication of algorithms and had a profound effect on future language development.","John Backus developed the Backus normal form method of describing programming languages specifically for ALGOL 58. It was revised and expanded by Peter Naur for ALGOL 60, and at Donald Knuth's suggestion renamed Backus\u2013Naur Form.","Peter Naur: \"As editor of the ALGOL Bulletin I was drawn into the international discussions of the language and was selected to be member of the European language design group in November 1959. In this capacity I was the editor of the ALGOL 60 report, produced as the result of the ALGOL 60 meeting in Paris in January 1960.\"","The following people attended the meeting in Paris (from January 11 to 16):","Alan Perlis gave a vivid description of the meeting: \"The meetings were exhausting, interminable, and exhilarating. One became aggravated when one's good ideas were discarded along with the bad ones of others. Nevertheless, diligence persisted during the entire period. The chemistry of the 13 was excellent.\"","ALGOL 60 inspired many languages that followed it. C. A. R. Hoare remarked: \"Here is a language so far ahead of its time that it was not only an improvement on its predecessors but also on nearly all its successors.\" The Scheme programming language, a variant of Lisp that adopted the block structure and lexical scope of ALGOL, also adopted the wording \"Revised Report on the Algorithmic Language Scheme\" for its standards documents in homage to ALGOL.","To date there have been at least 70 augmentations, extensions, derivations and sublanguages of Algol 60.","The Burroughs dialects included special Bootstrapping dialects such as ESPOL and NEWP.","ALGOL 60 as officially defined had no I\/O facilities; implementations defined their own in ways that were rarely compatible with each other. In contrast, ALGOL 68 offered an extensive library of transput (ALGOL 68 parlance for Input\/Output) facilities.","ALGOL 60 allowed for two evaluation strategies for parameter passing: the common call-by-value, and call-by-name. Call-by-name had certain limitations in contrast to call-by-reference, making it an undesirable feature in imperative language design. For example, it is impossible in ALGOL 60 to develop a procedure that will swap the values of two parameters if the actual parameters that are passed in are an integer variable and an array that is indexed by that same integer variable. However, call-by-name is still beloved of ALGOL implementors for the interesting \"thunks\" that are used to implement it. Donald Knuth devised the \"man or boy test\" to separate compilers that correctly implemented \"recursion and non-local references.\" This test contains an example of call-by-name.","There are 35 such reserved words in the standard Burroughs large systems sub-language:","There are 71 such restricted identifiers in the standard Burroughs large systems sub-language:","and also the names of all the intrinsic functions.","Implementations differ in how the text in bold must be written. The word 'INTEGER', including the quotation marks, must be used in some implementations in place of integer, above, thereby designating it as a special keyword.","Following is an example of how to produce a table using Elliott 803 ALGOL:","PUNCH(3) sends output to the teleprinter rather than the tape punch.\nSAMELINE suppresses the carriage return + line feed normally printed between arguments.\nALIGNED(1,6) controls the format of the output with 1 digit before and 6 after the decimal point","Since ALGOL 60 had no I\/O facilities, there is no portable hello world program in ALGOL. The following program could (and still will) compile and run on an ALGOL implementation for a Unisys A-Series mainframe, and is a straightforward simplification of code taken from The Language Guide at the University of Michigan-Dearborn Computer and Information Science Department Hello world! ALGOL Example Program page.","A simpler program using an inline format:","An even simpler program using the Display statement:","An alternative example, using Elliott Algol I\/O is as follows. Elliott Algol used different characters for \"open-string-quote\" and \"close-string-quote\", represented here by \u2018 and \u2019.","Here's a version for the Elliott 803 Algol (A104) The standard Elliott 803 used 5 hole paper tape and thus only had upper case. The code lacked any quote characters so \u00a3 (UK Pound Sign) was used for open quote and\u00a0? (Question Mark) for close quote. Special sequences were placed in double quotes (e.g. \u00a3\u00a3L?? produced a new line on the teleprinter).","The ICT 1900 series Algol I\/O version allowed input from paper tape or punched card. Paper tape 'full' mode allowed lower case. Output was to a line printer.",""]}