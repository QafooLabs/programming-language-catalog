{"name":"Lua","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/Lua_(programming_language)","description":["Lua (\u00a0\/\u02c8lu\u02d0\u0259\/ LOO-\u0259, from Portuguese: lua meaning \"moon\"; explicitly not \"LUA\") is a lightweight multi-paradigm programming language designed as a scripting language with \"extensible semantics\" as a primary goal. Lua is cross-platform since it is written in ISO C. Lua has a relatively simple C API compared to other scripting languages.","Lua was created in 1993 by Roberto Ierusalimschy, Luiz Henrique de Figueiredo, and Waldemar Celes, members of the Computer Graphics Technology Group (Tecgraf) at the Pontifical Catholic University of Rio de Janeiro, in Brazil.","From 1977 until 1992, Brazil had a policy of strong trade barriers (called a market reserve) for computer hardware and software. In that atmosphere, Tecgraf's clients could not afford, either politically or financially, to buy customized software from abroad. Those reasons led Tecgraf to implement from scratch the basic tools it needed.","Lua's historical \"father and mother\" were data-description\/configuration languages SOL (Simple Object Language) and DEL (data-entry language). They had been independently developed at Tecgraf in 1992\u20131993 to add some flexibility into two different projects (both were interactive graphical programs for engineering applications at Petrobras company). There was a lack of any flow control structures in SOL and DEL, and Petrobras felt a growing need to add full programming power to them.","Lua 1.0 was designed in such a way that its object constructors, being then slightly different from the current light and flexible style, incorporated the data-description syntax of SOL (hence the name Lua \u2013 sol is Portuguese for sun; lua is moon). Lua syntax for control structures was mostly borrowed from Modula (if, while, repeat\/until), but also had taken influence from CLU (multiple assignments and multiple returns from function calls, as a simpler alternative to reference parameters or explicit pointers), C++ (\"neat idea of allowing a local variable to be declared only where we need it\"), SNOBOL and AWK (associative arrays). In an article published in Dr. Dobb's Journal, Lua's creators also state that LISP and Scheme with their single, ubiquitous data structure mechanism (the list) were a major influence on their decision to develop the table as the primary data structure of Lua.","Current Lua semantics were borrowed mainly from Scheme:","Versions of Lua prior to version 5.0 were released under a license similar to the BSD license. From version 5.0 onwards, Lua has been licensed under the MIT License.","Lua is commonly described as a \u201cmulti-paradigm\u201d language, providing a small set of general features that can be extended to fit different problem types, rather than providing a more complex and rigid specification to match a single paradigm. Lua, for instance, does not contain explicit support for inheritance, but allows it to be implemented relatively easily with metatables. Similarly, Lua allows programmers to implement namespaces, classes, and other related features using its single table implementation; first-class functions allow the employment of many powerful techniques from functional programming; and full lexical scoping allows fine-grained information hiding to enforce the principle of least privilege.","In general, Lua strives to provide flexible meta-features that can be extended as needed, rather than supply a feature-set specific to one programming paradigm. As a result, the base language is light \u2013 the full reference interpreter is only about 150\u00a0kB compiled \u2013 and easily adaptable to a broad range of applications.","Lua is a dynamically typed language intended for use as an extension or scripting language, and is compact enough to fit on a variety of host platforms. It supports only a small number of atomic data structures such as boolean values, numbers (double-precision floating point by default), and strings. Typical data structures such as arrays, sets, lists, and records can be represented using Lua\u2019s single native data structure, the table, which is essentially a heterogeneous associative array.","Lua implements a small set of advanced features such as first-class functions, garbage collection, closures, proper tail calls, coercion (automatic conversion between string and number values at run time), coroutines (cooperative multitasking) and dynamic module loading.","By including only a minimum set of data types, Lua attempts to strike a balance between power and size.","The classic hello world program can be written as follows:","Comments use the following syntax, similar to that of Ada, SQL and VHDL:","The factorial is an example of a recursive function:","Lua has three types of loops: the while loop, the for loop, and the repeat loop.","The while loop has the syntax:","The for loop:","would repeat the loop body 5 times, outputting the numbers 1 through 5 inclusive.","Another form of the for loop is:","The repeat loop:","executes the loop body at least once, and would keep looping until cond becomes true.","Lua\u2019s treatment of functions as first-class values is shown in the following example, where the print function\u2019s behavior is modified:","Any future calls to print will now be routed through the new function, and because of Lua\u2019s lexical scoping, the old print function will only be accessible by the new, modified print.","Lua also supports closures, as demonstrated below:","A new closure for the variable x is created every time addto is called, so that the anonymous function returned will always access its own x parameter. The closure is managed by Lua\u2019s garbage collector, just like any other object.","Tables are the most important data structure (and, by design, the only built-in composite data type) in Lua, and are the foundation of all user-created types.","A table is a collection of key and data pairs, where the data is referenced by key; in other words, it's a hashed heterogeneous associative array. A key (index) can be of any data type except nil. An integer key of 1 is considered distinct from a string key of \"1\".","Tables are created using the {} constructor syntax:","Tables are always passed by reference:","We can insert\/remove values\/indexes from tables, as well.","Extensible semantics is a key feature of Lua, and the metatable concept allows Lua\u2019s tables to be customized in powerful and unique ways. The following example demonstrates an \"infinite\" table. For any , fibs[n] will give the thFibonacci number using dynamic programming and memoization.","Another example, with the __call metamethod to create a Object Oriented Programming feel:","Tables are often used as structures (or objects) by using strings as keys. Because such use is very common, Lua features a special syntax for accessing such fields. Example:","By using a table to store related functions, it can act as a namespace.","By using a numerical key, the table resembles an array data type. Lua arrays are 1-based: the first index is 1 rather than 0 as it is for many other programming languages (though an explicit index of 0 is allowed).","A simple array of strings:","An array of objects:","Using a hash map to emulate an array normally is slower than using an actual array; however, Lua tables are optimized for use as arrays to help avoid this issue.","Although Lua does not have a built-in concept of classes, they can be implemented using two language features: first-class functions and tables. By placing functions and related data into a table, an object is formed. Inheritance (both single and multiple) can be implemented via the metatable mechanism, telling the object to lookup nonexistent methods and fields in parent object(s).","There is no such concept as \"class\" with these techniques; rather, prototypes are used, as in the programming languages Self or JavaScript. New objects are created either with a factory method (that constructs new objects from scratch), or by cloning an existing object.","Lua provides some syntactic sugar to facilitate object orientation. To declare member functions inside a prototype table, one can use function table:func(args), which is equivalent to function table.func(self, args). Calling class methods also makes use of the colon: object:func(args) is equivalent to object.func(object, args).","Creating a basic vector object:","Lua programs are not interpreted directly from the textual Lua file, but are compiled into bytecode which is then run on the Lua virtual machine. The compilation process is typically transparent to the user and is performed during run-time, but it can be done offline in order to increase loading performance or reduce the memory footprint of the host environment by leaving out the compiler.","Like most CPUs, and unlike most virtual machines (which are stack-based), the Lua VM is register-based, and therefore more closely resembles an actual hardware design. The register architecture both avoids excessive copying of values and reduces the total number of instructions per function. The virtual machine of Lua 5 is one of the first register-based pure VMs to have a wide use.Perl's Parrot and Android's Dalvik are two other well-known register-based VMs.","This example is the bytecode listing of the factorial function defined above (as shown by the luac 5.1 compiler):","Lua is intended to be embedded into other applications, and accordingly it provides a robust, easy-to-use C API. The API is divided into two parts: the Lua core and the Lua auxiliary library.","The Lua API is fairly straightforward because its design eliminates the need for manual reference management in C code, unlike Python\u2019s API. The API, like the language, is minimalistic. Advanced functionality is provided by the auxiliary library, which consists largely of preprocessor macros which make complex table operations more palatable.","The Lua C API is stack based. Lua provides functions to push and pop most simple C data types (integers, floats, etc.) to and from the stack, as well as functions for manipulating tables through the stack. The Lua stack is somewhat different from a traditional stack; the stack can be indexed directly, for example. Negative indices indicate offsets from the top of the stack (for example, \u22121 is the last element), while positive indices indicate offsets from the bottom.","Marshalling data between C and Lua functions is also done using the stack. To call a Lua function, arguments are pushed onto the stack, and then the lua_call is used to call the actual function. When writing a C function to be directly called from Lua, the arguments are popped from the stack.","Here is an example of calling a Lua function from C:","Running this hello-world gives:","The C API also provides several special tables, located at various \u201cpseudo-indices\u201d in the Lua stack. At LUA_GLOBALSINDEX is the globals table, _G from within Lua, which is the main namespace. There is also a registry located at LUA_REGISTRYINDEX where C programs can store Lua values for later retrieval.","It is possible to write extension modules using the Lua API. Extension modules are shared objects which can be used to extend the functionality of the interpreter by providing native facilities to Lua scripts. From the Lua side, such a module appears as a namespace table holding its functions and variables. Lua scripts may load extension modules using require.","A growing collection of modules known as rocks are available through a package management system called LuaRocks, in the spirit of CPAN, RubyGems and Python Eggs. Other sources include LuaForge and the Lua Addons directory of lua-users.org wiki.","There are several packages for creating graphical user interfaces, Perl\/POSIX regular expressions, encryption, file compression, and many others. Prewritten Lua bindings exist for most popular programming languages, including other scripting languages. For C++, there are a number of template-based approaches and some automatic binding generators.","In video game development, Lua is widely used as a scripting language by game programmers, perhaps owing to how easy it is to embed, its fast execution, and its short learning curve.","On January, 2012, Lua was announced as a winner of the Front Line Award 2011 from the Game Developer Magazine in the category Programming Tools.","Other applications using Lua include:"]}