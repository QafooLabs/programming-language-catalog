{"name":"Ruby","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/Ruby_(programming_language)","description":["Ruby is a dynamic, reflective, general-purpose object-oriented programming language that combines syntax inspired by Perl with Smalltalk-like features. It was also influenced by Eiffel and Lisp. Ruby was first designed and developed in the mid-1990s by Yukihiro \"Matz\" Matsumoto in Japan.","Ruby supports multiple programming paradigms, including functional, object oriented, imperative and reflective. It also has a dynamic type system and automatic memory management; it is therefore similar in varying respects to Smalltalk, Python, Perl, Lisp, Dylan, Pike, and CLU.","The standard 1.8.7 implementation is written in C, as a single-pass interpreted language. The language specifications for Ruby were developed by the Open Standards Promotion Center of the Information-Technology Promotion Agency (a Japanese government agency) for submission to the Japanese Industrial Standards Committee and then to the International Organization for Standardization. It was accepted as a Japanese Industrial Standard (JIS X 3017) in 2011 and an international standard (ISO\/IEC 30170) in 2012. As of 2010[update], there are a number of complete or upcoming alternative implementations of Ruby, including YARV, JRuby, Rubinius, IronRuby, MacRuby (and its iOS counterpart, RubyMotion), and HotRuby. Each takes a different approach, with IronRuby, JRuby, MacRuby and Rubinius providing just-in-time compilation and MacRuby also providing ahead-of-time compilation. The official 1.9 branch uses YARV, as will 2.0 (development), and will eventually supersede the slower Ruby MRI.","Ruby was conceived on February 24, 1993 by Yukihiro Matsumoto who wished to create a new language that balanced functional programming with imperative programming. Matsumoto has said, \"I wanted a scripting language that was more powerful than Perl, and more object-oriented than Python. That's why I decided to design my own language.\"","At a Google Tech Talk in 2008 Matsumoto further stated, \"I hope to see Ruby help every programmer in the world to be productive, and to enjoy programming, and to be happy. That is the primary purpose of Ruby language.\"","The name \"Ruby\" was decided on during an online chat session between Matsumoto and Keiju Ishitsuka on February 24, 1993, before any code had been written for the language. Initially two names were proposed: \"Coral\" and \"Ruby\", with the latter being chosen by Matsumoto in a later email to Ishitsuka. Matsumoto has later remarked that a factor in choosing the name \"Ruby\" was because it was the birthstone of one of his colleagues.","The first public release of Ruby 0.95 was announced on Japanese domestic newsgroups on December 21, 1995. Subsequently three more versions of Ruby were released in two days. The release coincided with the launch of the Japanese-language ruby-list mailing list, which was the first mailing list for the new language.","Already present at this stage of development were many of the features familiar in later releases of Ruby, including object-oriented design, classes with inheritance, mixins, iterators, closures, exception handling, and garbage collection.","Ruby reached version 1.0 on December 25, 1996.","Following the release of Ruby 1.3 in 1999 the first English language mailing list ruby-talk began, which signalled a growing interest in the language outside of Japan. In September 2000, the first English language book Programming Ruby was printed, which was later freely released to the public further widening the adoption of Ruby amongst English speakers.","Ruby 1.2 was initially released in December 1998.","Ruby 1.4 was initially released in August 1999.","Ruby 1.6 was initially released in September 2000.","Ruby 1.8 was initially released in August 2003, and was stable for a long time. Although deprecated, there is still code based on it. Ruby 1.8 is incompatible with Ruby 1.9.","Around 2005, interest in the Ruby language surged in tandem with Ruby on Rails, a popular web application framework written in Ruby. Rails is frequently credited with making Ruby \"famous\".","Ruby 1.9 was released in December 2007. The latest stable version of the reference implementation is 1.9.3 and is dual-licensed under the Ruby License and a BSD License. Adoption of 1.9 was slowed by changes from 1.8 which required many popular third party gems to be rewritten.","Ruby 1.9 introduces many significant changes over the 1.8 series. Examples:","Ruby 1.9 will be followed by Ruby 2.0.","Ruby 2.0 is rumored to be \"100% compatible\" with Ruby 1.9.3.","As of October 2011[update], the plan is to have code freeze October 2012 and release February 2013.","Matsumoto has said that Ruby is designed for programmer productivity and fun, following the principles of good user interface design. He stresses that systems design needs to emphasize human, rather than computer, needs:","Ruby is said to follow the principle of least astonishment (POLA), meaning that the language should behave in such a way as to minimize confusion for experienced users. Matsumoto has said his primary design goal was to make a language which he himself enjoyed using, by minimizing programmer work and possible confusion. He has said that he had not applied the principle of least surprise to the design of Ruby, but nevertheless the phrase has come to be closely associated with the Ruby programming language. The phrase has itself been a source of surprise, as novice users may take it to mean that Ruby's behaviors try to closely match behaviors familiar from other languages. In a May 2005, discussion on the newsgroup comp.lang.ruby, Matsumoto attempted to distance Ruby from POLA, explaining that because any design choice will be surprising to someone, he uses a personal standard in evaluating surprise. If that personal standard remains consistent, there would be few surprises for those familiar with the standard.","Matsumoto defined it this way in an interview:","Ruby is object-oriented: every value is an object, including classes and instances of types that many other languages designate as primitives (such as integers, booleans, and \"nil\"). Variables always hold references to objects. Every function is a method and methods are always called on an object. Methods defined at the top level scope become members of the Object class. Since this class is an ancestor of every other class, such methods can be called on any object. They are also visible in all scopes, effectively serving as \"global\" procedures. Ruby supports inheritance with dynamic dispatch, mixins and singleton methods (belonging to, and defined for, a single instance rather than being defined on the class). Though Ruby does not support multiple inheritance, classes can import modules as mixins.","Ruby has been described as a multi-paradigm programming language: it allows procedural programming (defining functions\/variables outside classes makes them part of the root, 'self' Object), with object orientation (everything is an object) or functional programming (it has anonymous functions, closures, and continuations; statements all have values, and functions return the last evaluation). It has support for introspection, reflection and metaprogramming, as well as support for interpreter-basedthreads. Ruby features dynamic typing, and supports parametric polymorphism.","According to the Ruby FAQ, \"If you like Perl, you will like Ruby and be right at home with its syntax. If you like Smalltalk, you will like Ruby and be right at home with its semantics. If you like Python, you may or may not be put off by the huge difference in design philosophy between Python and Ruby\/Perl.\"","The syntax of Ruby is broadly similar to Perl and Python. Class and method definitions are signaled by keywords. In contrast to Perl, variables are not obligatorily prefixed with a sigil. When used, the sigil changes the semantics of scope of the variable. One difference from C and Perl is that keywords are typically used to define logical code blocks, without braces (i.e., pair of { and }). For practical purposes there is no distinction between expressions and statements. Line breaks are significant and taken as the end of a statement; a semicolon may be equivalently used. Unlike Python, indentation is not significant.","One of the differences of Ruby compared to Python and Perl is that Ruby keeps all of its instance variables completely private to the class and only exposes them through accessor methods (attr_writer, attr_reader, etc.). Unlike the \"getter\" and \"setter\" methods of other languages like C++ or Java, accessor methods in Ruby are created with a single line of code via metaprogramming. As invocation of these methods does not require the use of parentheses, it is trivial to change an instance variable into a full function, without modifying a single line of code or having to do any refactoring achieving similar functionality to C# and VB.NET property members.","Python's property descriptors are similar, but come with a tradeoff in the development process. If one begins in Python by using a publicly exposed instance variable, and later changes the implementation to use a private instance variable exposed through a property descriptor, code internal to the class may need to be adjusted to use the private variable rather than the public property. Ruby\u2019s design forces all instance variables to be private, but also provides a simple way to declare set and get methods. This is in keeping with the idea that in Ruby, one never directly accesses the internal members of a class from outside of it; rather, one passes a message to the class and receives a response.","See the examples section for samples of code demonstrating Ruby syntax.","Some features which differ notably from languages such as C or Perl:","Some features which differ notably from other languages:","A list of so-called gotchas may be found in Hal Fulton's book The Ruby Way, 2nd ed (ISBN 0-672-32884-4), Section 1.5. A similar list in the 1st edition pertained to an older version of Ruby (version 1.6), some problems of which have been fixed in the meantime. retry, for example, now works with while, until, and for, as well as iterators.","The Ruby official distribution also includes \"irb\", an interactive command-line interpreter which can be used to test code quickly. The following code fragment represents a sample session using irb:","The following examples can be run in a Ruby shell such as Interactive Ruby Shell or saved in a file and run from the command line by typing ruby .","Classic Hello world example:","Some basic Ruby code:","Conversions:","There are a variety of methods for defining strings in Ruby.","The following assignments are equivalent and support Variable interpolation:","The following assignments are equivalent and produce raw strings:","Constructing and using an array:","Constructing and using an associative array (called hashes in Ruby):","The two syntaxes for creating a code block:","When a code block is created it is always attached to a method as an optional block argument.","Parameter-passing a block to be a closure:","Creating an anonymous function:","Returning closures from a method:","Yielding the flow of program control to a block which was provided at calling time:","Iterating over enumerations and arrays using blocks:","A method such as inject() can accept both a parameter and a block. Inject iterates over each member of a list, performing some function on it while retaining an aggregate. This is analogous to the foldl function in functional programming languages. For example:","On the first pass, the block receives 10 (the argument to inject) as sum, and 1 (the first element of the array) as element; this returns 11. 11 then becomes sum on the next pass, which is added to 3 to get 14. 14 is then added to 5, to finally return 19.","Blocks work with many built-in methods:","Using an enumeration and a block to square the numbers 1 to 10 (using a range):","The following code defines a class named Person. In addition to 'initialize', the usual constructor to create new objects, it has two methods: one to override the  comparison operator (so Array#sort can sort by age) and the other to override the to_s method (so Kernel#puts can format its output). Here, \"attr_reader\" is an example of metaprogramming in Ruby: \"attr_accessor\" defines getter and setter methods of instance variables, \"attr_reader\" only getter methods. Also, the last evaluated statement in a method is its return value, allowing the omission of an explicit 'return'.","The above prints three names in reverse age order:","In Ruby, classes are never closed: you can always add methods to an existing class. This applies to the classes you write as well as the standard, built-in classes. All you have to do is open up a class definition for an existing class, and the new contents you specify will be added to whatever's there. A simple example of adding a new method to the standard library's Time class:","Adding methods to previously defined classes is often called monkey-patching. This practice, however, can lead to possible collisions of behavior and subsequent unexpected results, and is a concern for code scalability if performed recklessly.","An exception is raised with a raise call:","An optional message can be added to the exception:","You can also specify which type of exception you want to raise:","Alternatively, you can pass an exception instance to the raise method:","This last construct is useful when you need to raise a custom exception class featuring a constructor which takes more than one argument:","Exceptions are handled by the rescue clause. Such a clause can catch exceptions which inherit from StandardError. Also supported for use with exceptions are else and ensure","It is a common mistake to attempt to catch all exceptions with a simple rescue clause. To catch all exceptions one must write:","Or catch particular exceptions:","It is also possible to specify that the exception object be made available to the handler clause:","Alternatively, the most recent exception is stored in the magic global $!.","You can also catch several exceptions:","Ruby code can programmatically modify, at runtime, aspects of its own structure that would be fixed in more rigid languages, such as class and method definitions. This sort of metaprogramming can be used to write more concise code and effectively extend the language.","For example, the following Ruby code generates new methods for the built-in String class, based on a list of colors. The methods wrap the contents of the string with an HTML tag styled with the respective color.","The generated methods could then be used like so:","To implement the equivalent in many other languages, the programmer would have to write each method (in_black, in_red, in_green, etc.) by hand.","Some other possible uses for Ruby metaprogramming include:","More sample Ruby code is available as algorithms in the following articles:","The newest version of Ruby, the recently released version 1.9, has a single working implementation written in C that utilizes a Ruby-specific virtual machine.","Ruby version 1.8 has three main implementations: the official Ruby interpreter often referred to as the Matz's Ruby Interpreter or MRI, which is the most widely used; JRuby, a Java-based implementation that runs on the Java virtual machine; and Rubinius, a reimplementation of Ruby focusing on writing as much of the core in Ruby as possible.","There are other less-known or upcoming implementations such as Cardinal (an implementation for the Parrot virtual machine), IronRuby (alpha version available since July 24, 2008),Ruby.NET, XRuby and HotRuby (runs Ruby source code on a web browser and Flash).","The maturity of Ruby implementations tends to be measured by their ability to run the Ruby on Rails (Rails) framework, because it is a complex framework to implement, and it uses many Ruby-specific features. The point when a particular implementation achieves this goal is called The Rails singularity. The reference implementation (MRI), JRuby, and Rubinius are all able to run Rails unmodified in a production environment. IronRuby is starting to be able to run Rails test cases, but is still far from being production-ready.","Ruby is available on many operating systems, such as Linux, Mac OS X, Microsoft Windows, Windows Phone 7,Windows CE and most flavors of Unix.","Ruby 1.9 has recently been ported onto Symbian OS 9.x.","The Ruby Application Archive (RAA), as well as RubyForge, serve as repositories for a wide range of Ruby applications and libraries, containing more than seven thousand items. Although the number of applications available does not match the volume of material available in the Perl or Python community, there are a wide range of tools and utilities which serve to foster further development in the language.","RubyGems has become the standard package manager for Ruby libraries. It is very similar in purpose to Perl's CPAN, although its usage is more like apt-get.","Recently, many new and existing libraries have found a home on GitHub, a service that offers version control repository hosting for Git.",""]}