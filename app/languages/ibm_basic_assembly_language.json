{"name":"IBM Basic assembly language","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/IBM_Basic_assembly_language","description":["BAL (Basic Assembly Language) is a low-level language used on IBM mainframes from the earliest 360 series, through systems 370, 390, zSeries and System z, as well as the Univac 90\/60, 90\/70 and 90\/80 mainframes made by Sperry Corporation. The earliest version was provided with the System\/360 in 1964; the latest version is known as the IBM High-Level Assembler (HLASM). Programmers utilizing this family of assemblers refer to them as ALC, for Assembly Language Coding, or simply \"assembler\".","Properly speaking, \"Basic Assembly Language\" was the name of the extremely restricted dialect designed to be assembled on early System\/360 machines with only 8KiB of main memory, and only a card reader, a card punch, and a printer for input\/output: thus the word \"Basic\". However, the full name and the initialism \"BAL\" somehow almost immediately attached themselves in popular use to all assembly-language dialects on the System\/360 and its descendants.","The architecture of IBM mainframes has taken many forms over the years, including System\/360, System\/370 XA, ESA\/390, and z\/Architecture. Each of these architectures has retained compatibility with most of the features of its predecessor. BAL uses the native instruction set of these machines. It is thus closer to the hardware than third-generation languages such as COBOL.","The instruction set consists of the low-level operations supported by the hardware, such as","The extreme simplicity of these operations means that a program written in assembler will usually be much longer and harder to read than an equivalent program in, say, COBOL or Fortran. In the past, the speed of hand-coded assembler programs was often felt to make up for this drawback, but with the advent of optimizing compilers, C for the mainframe, and other advances, assembler has lost much of its appeal. IBM continues to upgrade the assembler, however, and it is still used when the need for speed or very fine control is paramount.","Another reason to use assembler is that not all operating system functions can be accessed in high level languages, Basically, the application program interface of mainframe operating systems is defined as a (large) set of assembly language \"macro\" instructions, that typically invoke Supervisor Call (SVC) hardware instructions, that in turn invoke operating system routines through the interrupt system. But it is possible to invoke assembler subroutines from programs written in high-level languages.","The format of assembler language statements reflects the layout of an 80-column punched card, though successive versions have relaxed most of the restrictions.","Basic Assembly language also permitted an alternate statement format with the statement starting in column 25, allowing the assembled instruction to be punched into the same card beginning in column 1. This option was not continued in later versions of the assembler.","Three main types of instructions are found in the source code of a program written in assembler.","There is a \"one-to-one\" relationship with machine instructions. The full mnemonic instruction set is described in the Principles of Operation manual for each processor. Examples:","Generally accepted standards, although by no means mandatory, include the identification of general purpose registers with the mnemonic '\"R\" through EQU statements elsewhere in the program to ease the readability of assembler language programs and provide a cross-reference of register usage. Thus typically you may see the following in an assembler program:-","The assembler itself needs instructions from the programmer too. For instance, CSECT means \"start a section of code here\"; DC defines a constant to be placed in the object code.","Basic assembler language did not support macros. Later assembler versions allowed the programmer to group instructions together into macros and add them to a library, which can then be invoked in other programs, usually with parameters, like the preprocessor facilities in C and related languages. Macros can include conditional assembler instructions, such as AIF (an IF construct), used to generate different code according to the chosen parameters. That makes the macro facility of this assembler very powerful. While multiline macros in C are an exception, macro definitions in assembler can easily be hundreds of lines.","The following fragment shows how the logic \"If SEX = 'M', add 1 to MALES; else, add 1 to FEMALES\" would be performed in assembler.","The following is the ubiquitous Hello world program, and would, executing under an IBM operating system such as OS VS\/1 or MVS, display the words 'Hello World' on the operator's console:","Note: \"WTO\" is an assembler macro that generates an operating system call. Because of saving registers and later restoring and returning, this small program is usable as a batch program invoked directly by the operating system Job control language (JCL) like this","or, alternatively, it can be CALLed as a subroutine from such a program.","Most programs will require services from the operating system, and the OS provides standard macros for requesting those services. These are analogous to Unix system calls. For instance, in MVS (later z\/OS), STORAGE (with the OBTAIN parameter) dynamically allocates a block of memory, and GET retrieves the next logical record from a file.","Unlike Unix system calls, macros are not standardized across operating systems though. Even something as simple as writing a \"sequential file\" is coded differently e.g. in Z\/OS than in Z\/VSE."]}