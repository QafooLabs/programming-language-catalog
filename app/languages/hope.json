{"name":"Hope","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/Hope_(programming_language)","description":["Hope is a small functional programming language developed in the 1970s at Edinburgh University. It predates Miranda and Haskell and is contemporaneous with ML (also developed at Edinburgh). It is notable for being the first language with call-by-pattern evaluation and algebraic data types. Hope is an important language in the development of functional programming.","The name may have been derived from Hope Park Square in Edinburgh, at one time the location of the Department of Artificial Intelligence.","A Hope tutorial by Roger Bailey was featured in the August 1985 issue of Byte on declarative programming.","A factorial program in Hope is","Unlike in Haskell, changing the order of the clauses would not change the meaning of the program, because Hope's pattern matching always favors more specific patterns over less specific ones.","Another way in which Hope differs from Haskell and ML is that explicit type declarations in Hope are required: there is no option to use a type-inference algorithm in Hope.","The first implementation of Hope was strict, but since that one there have been lazy versions and strict versions with lazy constructors (the language described in has a lazy constructor for lists only).",""]}