{"name":"RPG","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/IBM_RPG","description":["RPG is a high-level programming language (HLL) for business applications.","It has a long history, having been developed by IBM in 1959 as the Report Program Generator - a tool to replicate card processing on the IBM 1401 then updated to RPG II for the IBM System\/3 in the late 1960s, and since evolved into an HLL equivalent to COBOL and PL\/I. It remains a popular programming language on the IBM Power i platform where the current version, RPG IV (aka ILE RPG), provides a modern programming environment.","While IBM is the creator and primary vendor of RPG the language is available from other mainframe and microcomputer manufacturers, including Unisys.","An RPG program typically starts off with File Specifications, listing all files being written to, read from or updated, followed by Data Definition Specifications containing program elements such as Data Structures and dimensional arrays, much like a \"Working-Storage\" section of a COBOL program or var statements in a Pascal program. This is followed by Calculation Specifications, which contain the actual meat of the code. Output Specifications can follow which can be used to determine the layout of other files or reports. Alternatively files, some data structures and reports can be defined externally, mostly eliminating the need to hand code input and output specifications.","In the early days of RPG, its major strength was known as the program cycle: every RPG program executes within an implied loop, which can apply the program to every record of a file. At that time each record (individual punched card) would be compared to each line in the program, which would act upon the record, or not, based upon whether that line had an \"indicator\" turned \"on\" or \"off\" \u2014 from a set of logical variables numbered 01\u201399 for user-defined purposes, or other smaller sets based upon record, field, or report processing functions. The concept of level breaks and matching records is unique to the RPG II language, and was originally developed with card readers in mind.","Today, most RPG programmers avoid using the cycle in favor of controlling the flow of the program with standard looping constructs.","RPG is one of the few languages created for punched card machines that is still in common use today. This is because the language has evolved considerably over time. It was originally developed by IBM in 1959. The name Report Program Generator was descriptive of the purpose of the language: generation of reports from data files, including matching record and sub-total reports.","FARGO (Fourteen-o-one Automatic Report Generation Operation) was the predecessor to RPG on the IBM 1401 . Both languages were intended to facilitate ease of transition for IBM tabulating machine (Tab) unit record equipment technicians to the then new computers.","Tab machine technicians were accustomed to plugging wires into control panels to implement input, output, control and counter operations (add, subtract, multiply, divide). Tab machines programs were executed by impulses emitted in a machine cycle; hence, FARGO and RPG emulated the notion of the machine cycle with the program cycle. RPG was superior to and rapidly replaced FARGO as the report generator program of choice.","The alternative languages generally available at the time were Assembler, COBOL or FORTRAN. COBOL was a natural language-like business oriented language and FORTRAN was a language that facilitated mathematical applications. Other languages of the era included ALGOL and Autocoder and a few years later PL\/I. Assembler and COBOL were more common in mainframe business operations (System\/360 models 30 and above) and RPG more commonly used by customers who were in transition from tabulating equipment (System\/360 model 20).","RPG II was introduced with the System\/3 series of computers. It was later used on System\/32, System\/34, and System\/36, with an improved version of the language. ICL also produced a version on its VME\/K operating system","RPG III was created for the System\/38 and its successor the AS\/400 . RPG III significantly departed from the original language, providing modern structured constructs like IF-ENDIF blocks, DO loops, and subroutines (RPG2 Supported Subroutines). RPG III was also available for larger systems including the IBM System\/370 mainframe running OS\/VS1. It was also available from Unisys for the VS\/9 operating system running on the Univac 90\/60 mainframe.","DE\/RPG or Data Entry RPG was exclusively available on the IBM 5280 series of data-entry workstations in the early 80s. It was similar to RPG III but lacking external Data Descriptions (DDS) to describe data(files) like on the System\/38 and its successors. Instead, the DDS part had to be included into the RPG source itself.","RPG\/400 was effectively RPGIII running on AS\/400. IBM renamed the RPG compiler as \"RPG\/400\" but it was identical to the RPGIII compiler on System\/38. The rebranding took place to differentiate between the earlier CISC (Complete Instruction Set Compile) on the beige boxes to the later 'faster' RISC (Reduced Instruction Set Compile), usually on the black servers. Virtually all IBM products were rebranded as xxx\/400 and the RPG compiler was no exception. RPGIII compiled with the RPG\/400 compiler offered nothing new to the RPGIII language until IBM began development of new operation codes, such SCAN, CAT and XLATE after several years of AS\/400 availability. These enhancements to RPGIII were not available in the System\/38 version of RPGIII.","RPG IV (aka RPGLE, aka ILE RPG) was released in 1994 and the name, officially, was no longer an initialism. RPG IV offered a greater variety of expressions within its Extended Factor-2 Calculation Specification and, later in life, its free-format Calculation Specifications and Procedure syntax. RPG IV is the only version of RPG supported by IBM on its long-line of successors to the AS\/400 system.","In 2001, with the release of OS\/400 V5R1, RPG IV offered even greater freedom for calculations than offered by the Extended Factor-2 Calculation Specification: a free-format text-capable source entry, as an alternative to the original column-dependent source format. The \"\/FREE\" calculation does not require the operation code to be placed in a particular column; the operation code is optional for the EVAL and CALLP operations; and syntax generally more closely resembles that of mainstream, general-purpose programming languages. However, the free format only applies to the calculation specifications. F and D specifications still need to be in column-dependent format.","Today, RPG IV is a considerably more robust language. Editing can still be done via the simple green screen editor (even though syntax checking is not supported for features introduced from OS 7.1 onwards) or it can be edited via PC using IBM's Websphere Development Studio now named RDi (Rational Development Studio for i) a customized implementation of Eclipse. IBM is continually extending its capabilities and adding more built-in functions (BIFs). It has the ability to link to Java objects, and i5\/OS APIs; it can be used to write CGI programs with the help of IBM's Cgidev2 web toolkit,RPGLIB (a collection of hundreds of pre-written RPG IV routines), CGILIB, the RPG Toolbox, and other commercial Web enabled packages. Even with the changes, it retains a great deal of backward compatibility, so an RPG program written 37 years ago could run today with little or no modification.","Furthermore, with the implementation of the SQL Precompiler, current RPG developers can take advantage of IBM's cost-based SQE (SQL Query Engine). As opposed to the traditional F-Spec approach, where a developer identified a specific access path to a data set, a developer can now implement standard embedded SQL statements directly in the program. When compiled, the SQL Precompiler transforms the invalid embedded SQL statements into valid RPG statements that call the database manager programs that ultimately implement the query request.","OS\/400 was later renamed i5\/OS to correspond with the new IBM System i5 branding initiative; the 5 was later dropped in favor of just System i. In March 2008 i5\/OS was renamed IBM i as part of the Power Systems consolidation of System i and System p product lines. The new Power Systems also adopt more mainstream version numbers, substituting 6.1 for the twenty year old V1R1M0 notation. The latest release is now referred to as IBM i 7.1 and fully supports the RPG IV language, as well as many others. WebSphere Development Studio Client (WDSC) is now referred to as Rational Developer for i (RDi), of which three product levels are available. They are called Rational Developer for i (RDi), RDi Service Oriented Architecture (RDi SOA), and Rational Application Developer (RAD). The new lineup provides in more granular packaging all of the development tools and support previously offered by WDSC and WDSC Advanced Edition.","Some of the more unmodern features of the language include the dependency on the EBCDIC character sets which means that use of UTF-8 requires considerable effort and is quite risky (the programmer has to take responsibility not to get his\/her character data mixed up with a single byte CCSID), whereas 16 bit characters (e.g. UTF-16) are supported directly via a separate datatype (Graphic). The threadsafeness of the language is also a bit odd as the compiler team has solved this by giving each thread its own static storage, rather than make the RPG run-time environment re-entrant. This has been noted to meddle up the distinction between a thread and a process (making RPG IV threads a kind of hybrid between threads and processes).","RPG supports the following data types.","The following program receives a customer number as an input parameter and returns the name and address as output parameters.","The same program using free calculations:","Assume the ARMSTF1 example table was created using the following SQL Statement:","The same program using free calculations and embedded SQL:","As of V7R1 of the operating system, the above program would not necessarily need the prototype in a separate file, so it could be completely written as:","As stated above, the RPG programming language originally was introduced by IBM for their proprietary 1401, \/360, \/3, \/32, \/34, \/36, \/38 AS\/400 and System i systems. There have also been implementations for the Digital VAX, Sperry Univac BC\/7, Univac system 80, Siemens BS2000, Burroughs B700, B1700, Hewlett Packard HP3000, ICL 2900 series, Honeywell 6220 and 2020, Four-Phase IV\/70 and IV\/90 series and WANG VS, as well as miscellaneous compilers & runtime environments for Unix-based systems (INFINITE 36 (formerly UNIBOL36)) and PCs (Baby\/400, Lattice-RPG).","The latest platform to receive an RPG compiler is Windows .Net through the WINRPG compiler. This version contains extensions to RPG IV beyond that of the base IBM compiler. These extensions provide Windows and .Net hooks.","RPG II applications are still supported under the IBM z\/VSE and z\/OS operating systems, HP MPE operating system on HP3000 and the OpenVMS operating system on VAX, Alpha, and Unisys MCP."]}