{"name":"SLIP","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/SLIP_(programming_language)","description":["SLIP is a list processing computer programming language, invented by Joseph Weizenbaum in the 1960s. The name SLIP stands for Symmetric LIst Processor. It was first implemented as an extension to the Fortran programming language, and later embedded into MAD and ALGOL.","In a nutshell, SLIP consisted of a set of FORTRAN \"accessor\" functions which operated on circular doubly linked lists with fixed-size data fields. The \"accessor\" functions had direct and indirect addressing variants.","The list representation had four types of cell: a reader, a header, a sublist indicator, and a payload cell. The header included a reference count field for garbage collection purposes. The sublist indicator allowed it to be able to represent nested lists, such as (A, B, C, (1, 2, 3), D, E, F) where (1, 2, 3) is a sublist indicated by a cell in the '*' position in the list (A, B, C, *, D, E, F). The reader was essentially a state history stack\u2014a good example of a memento pattern -- where each cell pointed to the header of the list being read, the current position within the list being read, and the level or depth of the history stack.",""]}