{"name":"PCF","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/Programming_language_for_Computable_Functions","description":["In computer science, Programming Computable Functions,[note 1] or PCF, is a typed functional language introduced by Gordon Plotkin in 1977. It is based on the Logic of Computable Functions (LCF) by Dana Scott. It can be considered as an extended version of the typed lambda calculus or a simplified version of modern typed functional languages such as ML.","A fully abstract model for PCF was first given by Milner (1977). However, since Milner's model was essentially based on the syntax of PCF it was considered less than satisfactory (Ong, 1995). The first two fully abstract models not employing syntax were formulated during the 1990s. These models are based on game semantics (Hyland and Ong, 2000; Abramsky, Jagadeesan, and Malacaria, 2000) and Kripke logical relations (O'Hearn and Riecke, 1995). For a time it was felt that neither of these models was completely satisfactory, since they were not effectively presentable. However, Ralph Loader demonstrated that no effectively presentable fully abstract model could exist, since the question of program equivalence in the finitary fragment of PCF is not decidable.","The types of PCF are inductively defined as","A context is a list of pairs x\u00a0: \u03c3, where x is a variable name and \u03c3 is a type, such that no variable name is duplicated. One then defines typing judgments of terms-in-context in the usual way for the following syntactical constructs:","A relatively straightforward semantics for the language is the Scott model. In this model,","This model is not fully abstract for PCF; but it is fully abstract for the language obtained by adding a parallel or operator to PCF (p.\u00a0293 in the Hyland and Ong 2000 reference below)."]}