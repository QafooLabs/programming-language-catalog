{"name":"REXX","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/REXX","description":["REXX (REstructured eXtended eXecutor) is an interpreted programming language developed at IBM by Mike Cowlishaw. It is a structured, high-level programming language designed for ease of learning and reading. Proprietary and open source REXX interpreters exist for a wide range of computing platforms; compilers exist for IBM mainframe computers.","Rexx is widely used as a glue language, macro language, and is often used for processing data and text and generating reports; these similarities with Perl mean that Rexx works well in Common Gateway Interface (CGI) programming and it is indeed used for this purpose. Rexx is the primary scripting language in some operating systems, e.g. OS\/2, MVS, VM, AmigaOS, and is also used as an internal macro language in some other software, e.g., KEDIT, THE, the ZOC terminal emulator. Additionally, the Rexx language can be used for scripting and macros in any program that uses Windows Scripting Host ActiveX scripting engines languages (e.g. VBScript and JScript) if one of the Rexx engines (see below) are installed.","Rexx is supplied with VM\/SP on up, TSO\/E Version 2 on up, OS\/2 (1.3 on up), AmigaOS Version 2 on up, PC DOS (7.0 or 2000), and Windows NT 4.0 (Resource Kit: Regina). REXX scripts for OS\/2 and NT-based Windows share the filename extension .cmd with other scripting languages, and the first line of the script specifies the interpreter to be used.","A Rexx script or command is sometimes referred to as an EXEC in a nod to Rexx's role as a replacement for the older EXEC command language on CP\/CMS and VM\/370 and EXEC 2 command language on VM\/SP.","REXX has the following characteristics and features:","REXX has just twenty-three, largely self-evident, instructions (e.g., call, parse, and select) with minimal punctuation and formatting requirements. It is essentially an almost free-form language with only one data-type, the character string; this philosophy means that all data are visible (symbolic) and debugging and tracing are simplified.","REXX syntax looks similar to PL\/I, but has fewer notations; this makes it harder to parse (by program) but easier to use, except for cases where PL\/I habits may lead to surprises.","REXX was designed and first implemented, in assembly language, as an \u2018own-time\u2019 project between 20 March 1979 and mid-1982 by Mike Cowlishaw of IBM, originally as a scripting programming language to replace the languages EXEC and EXEC 2. It was designed to be a macro or scripting language for any system. As such, REXX is considered a precursor to Tcl and Python. REXX was also intended by its creator to be a simplified and easier to learn version of the PL\/I programming language. However, some differences from PL\/I may trip up the unwary.","It was first described in public at the SHARE 56 conference in Houston, Texas, in 1981, where customer reaction, championed by Ted Johnston of SLAC, led to it being shipped as an IBM product in 1982.","Over the years IBM included REXX in almost all of its operating systems (VM\/CMS, VM\/GCS, MVS TSO\/E, AS\/400, VSE\/ESA, AIX, CICS\/ESA, PC DOS, and OS\/2), and has made versions available for Novell NetWare, Windows, Java, and Linux.","The first non-IBM version was written for PC DOS by Charles Daney in 1984\/5. The first compiler version appeared in 1987, written for CMS by Lundin and Woodruff. Other versions have also been developed for Atari, AmigaOS, Unix (many variants), Solaris, DEC, Windows, Windows CE, Pocket PC, DOS, Palm OS, QNX, OS\/2, Linux, BeOS, EPOC32, AtheOS, OpenVMS, OpenEdition, Apple Macintosh, and Mac OS X.","The Amiga version of REXX, called ARexx was included with AmigaOS 2 onwards and was popular for scripting as well as application control. Many Amiga applications have an \"ARexx port\" built into them which allows control of the application from Rexx. One single Rexx script could even switch between different Rexx ports in order to control several running applications.","Several freeware versions of REXX are available. In 1992, the two most widely-used open-source ports appeared: Ian Collier's REXX\/imc for Unix and Anders Christensen's Regina (later adopted by Mark Hessling) for Windows and Linux. BREXX is well known for WinCE and Pocket PC platforms, and has been \"back-ported\" to VM\/370 and MVS.","OS\/2 had a visual development system from Watcom VX-REXX another dialect was VisPro REXX from Hockware.","In 1996 American National Standards Institute (ANSI) published a standard for REXX: ANSI X3.274\u20131996 \u201cInformation Technology \u2013 Programming Language REXX\u201d. More than two dozen books on REXX have been published since 1985.","Since the mid-1990s, two newer variants of REXX have appeared:","In 1990, Cathy Dager of SLAC organized the first independent REXX symposium, which led to the forming of the REXX Language Association. Symposia are held annually.","REXX marked its 25th anniversary on 20 March 2004, which was celebrated at the REXX Language Association\u2019s 15th International REXX Symposium in B\u00f6blingen, Germany, in May 2004.","On October 12, 2004, IBM announced their plan to release their Object REXX implementation's sources under the Common Public License. Recent releases of Object REXX contain a ActiveX WSH scripting engine implementing this version of the Rexx language.","On February 22, 2005, the first public release of Open Object Rexx (ooRexx) was announced. This product contains a WSH scripting engine which allows for programming of the Windows operating system and applications with Rexx in the same fashion in which Visual Basic and Java\/J++ are implemented by the default WSH installation and Perl, Tcl, Python third-party scripting engines. The default filename extension for ooRexxScript scripts is *.rxs.","A command-line Rexx interpreter is also installed with ooRexx, and it is also possible to run ooRexxScript programs from the command line by means of the CScript command (WScript may also be run from the command line) invoking the Windows Scripting Host.","A Rexx IDE, RxxxEd, has been developed for Windows. RxSock for network communication as well as other add-ons to and implementations of Regina Rexx have been developed, and a Rexx interpreter for the Windows command line is supplied in most Resource Kits for various versions of Windows and works under all of them as well as MS-DOS.","Portable Rexx by Kilowatt and Personal Rexx by Quercus are two Rexx interpreters designed for MS-DOS and can of course be run under Windows as well using a command prompt.","Originally it was just called \"Rex\", \"A Reformed EXecutor\"; the extra \"X\" was added to avoid collisions with other products' names. The expansion of Rexx to the REstructured EXtended EXecutor is believed to be a backronym. REX was originally all uppercase because the mainframe code was uppercase oriented. The style in those days was to have all-caps names, partly because almost all code was still all-caps then. For the product it became REXX, and both editions of Mike Cowlishaw's book use all-caps. By the 1990s it was largely written Rexx or, with small caps: REXX. IBM documents use REXX, and the ANSI standard uses REXX; Mike Cowlishaw has expressed his order of preference to be: (a) REXX, (b )Rexx, (c) REXX.","The loop control structure in REXX begins with a DO and ends with an END but comes in several varieties. NetRexx uses the keyword LOOP instead of DO for looping, while ooRexx treats LOOP and DO as equivalent when looping.","Traditional forms:","With an index variable:","another variant:","The step increment (z above) may be omitted and defaults to 1. The upper limit (y above) can also be omitted, which makes the loop continue forever. You can also loop forever without an index variable with this:","A program can break out of the current loop with the leave instruction (which is the normal way to exit a \"forever\" loop), or can short-circuit it with the iterate instruction.","The do while and do until forms are equivalent to:","and:","Testing conditions with IF","Note that the ELSE clause is optional.","Or, to put it more concisely:","For single instructions, DO and END can also be omitted:","Or, in another concise version:","Indentation is optional, but it helps improve the readability.","SELECT is REXX's CASE structure, like many other constructs derived from PL\/I:","NOP indicates no instruction is to be executed.","Note that the OTHERWISE clause is optional. If omitted and no WHEN conditions are met, then the SYNTAX condition is raised.","Variables in REXX are typeless, and initially are evaluated as their names, in upper case. Thus a variable's type can vary with its use in the program:","Unlike many other programming languages, classic REXX has no direct support for arrays of variables addressed by a numerical index. Instead it provides compound variables. A compound variable consists of a stem followed by a tail. A . (dot) is used to join the stem to the tail. If the tails used are numeric, it is easy to produce the same effect as an array.","Afterwards the following variables with the following values exist: stem.1 = 9, stem.2 = 8, stem.3 = 7...","Unlike arrays, the index for a stem variable is not required to have an integer value. For example, the following code is valid:","In REXX it is also possible to set a default value for a stem.","After these assignments the term stem.3 would produce 'Unknown'.","The whole stem can also be erased with the DROP statement.","This also has the effect of removing any default value set previously.","By convention (and not as part of the language) the compound stem.0 is often used to keep track of how many items are in a stem, for example a procedure to add a word to a list might be coded like this:","It is also possible to have multiple elements in the tail of a compound variable. For example:","Multiple numerical tail elements can be used to provide the effect of a multi-dimensional array.","Features similar to REXX compound variables are found in many other languages (associative arrays in AWK, hashes in Perl, Hashtables in Java, etc). Most of these languages provide an instruction to iterate over all the keys (or tails in REXX terms) of such a construct, but this is lacking in classic REXX. Instead it is necessary to keep auxiliary lists of tail values as appropriate. For example in a program to count words the following procedure might be used to record each occurrence of a word.","and then later","At the cost of some clarity it is possible to combine these techniques into a single stem.","and later","However, REXX provides no safety net here, so if one of your words happens to be a whole number less than dictionary.0 the above technique will fail mysteriously.","Recent implementations of REXX, including IBM's Object REXX and the open source implementations like ooRexx include a new language construct to simplify iteration over the value of a stem, or over another collection object such as an array, table, list, etc.","The PARSE instruction is particularly powerful; it combines some useful string-handling functions. Its syntax is:","where origin specifies the source:","and template can be:","upper is optional; if specified, data will be converted to upper case before parsing.","Examples:","Using a list of variables as template","displays the following:","Using a delimiter as template:","also displays the following:","Using column number delimiters:","displays the following:","A template can use a combination of variables, literal delimiters, and column number delimiters.","The INTERPRET instruction evaluates its argument and treats its value as a REXX statement. Sometimes INTERPRET is the clearest way to perform a task, but it is often used where clearer code is possible using, e.g., value().","","This displays 16 and exits. Because variable contents in REXX are strings, including rational numbers with exponents and even entire programs, REXX offers to interpret strings as evaluated expressions.","This feature could be used to pass functions as function parameters, such as passing SIN, COS, etc. to a procedure to calculate integrals.","Note that REXX offers only basic math functions like ABS, DIGITS, MAX, MIN, SIGN, RANDOM, and a complete set of hex plus binary conversions with bit operations. More complex functions like SIN had to be implemented from scratch or obtained from third party external libraries. Some external libraries, typically those implemented in traditional languages, did not support extended precision.","Later versions (non-classic) support CALL variable constructs. Together with the built-in function VALUE, CALL can be used in place of many cases of INTERPRET. This is a classic program:","A slightly more sophisticated REXX calculator:","PULL is shorthand for parse upper pull","Likewise, ARG is shorthand for parse upper arg","The power of the INTERPRET instruction had other uses. The Valour software package relied upon REXX's interpretive ability to implement an OOP environment. Another use was found in an unreleased Westinghouse[disambiguation needed] product called Time Machine that was able to fully recover following a fatal error.","The REXX SIGNAL instruction is intended for abnormal changes in the flow of control (see the next section). However, it can be misused and treated like the GOTO statement found in other languages (although it is not strictly equivalent, because it terminates loops and other constructs). This can produce difficult-to-read code.","It is possible in REXX to intercept and deal with errors and other exceptions, using the SIGNAL instruction. There are seven system conditions: ERROR, FAILURE, HALT, NOVALUE, NOTREADY, LOSTDIGITS and SYNTAX. Handling of each can be switched on and off in the source code as desired.","This example will run until stopped by the user:","On most PCs, halting would be accomplished by pressing the Ctrl-Pause (also called the Break key).","On some mainframe systems, pressing the PA1 key (Program Assist).","Virtually all serious REXX programs contain signal on novalue or a similar statement. This disables the \"feature\", where undefined variables get their own (upper case) name as value. The status of a variable can be checked with the built-in function SYMBOL returning VAR for defined variables.","Function VALUE can be used to get the value of variables without triggering a NOVALUE condition, but its main purpose is to read and set environment variables - similar to POSIX getenv and putenv.","When a condition is handled by SIGNAL ON, the SIGL and RC system variables can be analyzed to understand the situation. RC contains the REXX error code and SIGL contains the line number where the error arose.","Beginning with REXX version 4 conditions can get names, and there's also a CALL ON construct. That's handy if external functions do not necessarily exist:"]}