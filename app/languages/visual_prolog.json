{"name":"Visual Prolog","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/Visual_Prolog","description":["Visual Prolog, also formerly known as PDC Prolog and Turbo Prolog, is a strongly typed object-oriented extension of Prolog. As Turbo Prolog it was marketed by Borland, but it is now developed and marketed by the Danish firm Prolog Development Center (PDC) that originally developed it. Visual Prolog can build Microsoft Windows GUI-applications, console applications, DLLs (dynamic link libraries), and CGI-programs. It can also link to COM components and to databases by means of ODBC.","Visual Prolog is compiled rather than interpreted, as is traditional for logic languages. This provides the important improvement of converting traditional Prolog-typical run-time errors to compiler warnings, which ensures a better robustness of the finished applications.","The core of Visual Prolog are Horn clauses, pattern matching and controlled non-determinism like in traditional Prolog, but unlike traditional Prolog, Visual Prolog has always been strongly and statically typed.","Since version 6.0 the language has been fully object-oriented.","Version 7.0 introduced parametric polymorphism.","Version 7.2 introduced anonymous predicates (a logical pendant to anonymous functions) and namespaces (see also New Features in Visual Prolog 7.2).","Version 7.3 introduced generic classes and interfaces (see Generic programming), guarded monitors (see also New Features in Visual Prolog 7.3).","In the 'Towers of Hanoi' example, the Prolog inference engine figures out how to move a stack of any number of progressively smaller disks, one at a time, from the left ('left') pole to the right pole ('right') in the described way, by means of a center ('center') pole as transit, so that there's never a bigger disk on top of a smaller disk. The predicate 'hanoi' takes an integer = the number of disks, as an initial argument. In real-life, Visual Prolog is especially suited for intricate problems, such as resource planning, etc. As the example shows, Visual Prolog can be used for quick 'programming in the small,' but it is mostly employed for industrial-strength large applications."]}