{"name":"C#","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/C_Sharp_(programming_language)","description":["C#[note 1] (pronounced cee sharp) is a multi-paradigm programming language encompassing strong typing, imperative, declarative, functional, generic, object-oriented (class-based), and component-oriented programming disciplines. It was developed by Microsoft within its .NET initiative and later approved as a standard by Ecma (ECMA-334) and ISO (ISO\/IEC 23270:2006). C# is one of the programming languages designed for the Common Language Infrastructure.","C# is intended to be a simple, modern, general-purpose, object-oriented programming language. Its development team is led by Anders Hejlsberg. The most recent version is C# 4.0, which was released on April 12, 2010.","The ECMA standard lists these design goals for C#:","The name \"C sharp\" was inspired by musical notation where a sharp indicates that the written note should be made a semitone higher in pitch. This is similar to the language name of C++, where \"++\" indicates that a variable should be incremented by 1.","Due to technical limitations of display (standard fonts, browsers, etc.) and the fact that the sharp symbol (U+266F \u266f music sharp sign (HTML: &#9839;)) is not present on the standard keyboard, the number sign (U+0023 # number sign (HTML: &#35;)) was chosen to represent the sharp symbol in the written name of the programming language. This convention is reflected in the ECMA-334 C# Language Specification. However, when it is practical to do so (for example, in advertising or in box art), Microsoft uses the intended musical symbol.","The \"sharp\" suffix has been used by a number of other .NET languages that are variants of existing languages, including J# (a .NET language also designed by Microsoft that is derived from Java 1.1), A# (from Ada), and the functional programming language F#. The original implementation of Eiffel for .NET was called Eiffel#, a name retired since the full Eiffel language is now supported. The suffix has also been used for libraries, such as Gtk# (a .NET wrapper for GTK+ and other GNOME libraries), Cocoa# (a wrapper for Cocoa) and Qt# (a .NET language binding for the Qt toolkit).","During the development of the .NET Framework, the class libraries were originally written using a managed code compiler system called Simple Managed C (SMC). In January 1999, Anders Hejlsberg formed a team to build a new language at the time called Cool, which stood for \"C-like Object Oriented Language\". Microsoft had considered keeping the name \"Cool\" as the final name of the language, but chose not to do so for trademark reasons. By the time the .NET project was publicly announced at the July 2000 Professional Developers Conference, the language had been renamed C#, and the class libraries and ASP.NET runtime had been ported to C#.","C#'s principal designer and lead architect at Microsoft is Anders Hejlsberg, who was previously involved with the design of Turbo Pascal, Embarcadero Delphi (formerly CodeGear Delphi and Borland Delphi), and Visual J++. In interviews and technical papers he has stated that flaws[citation needed] in most major programming languages (e.g. C++, Java, Delphi, and Smalltalk) drove the fundamentals of the Common Language Runtime (CLR), which, in turn, drove the design of the C# language itself.","James Gosling, who created the Java programming language in 1994, and Bill Joy, a co-founder of Sun Microsystems, the originator of Java, called C# an \"imitation\" of Java; Gosling further claimed that \"[C# is] sort of Java with reliability, productivity and security deleted.\" Klaus Kreft and Angelika Langer (authors of a C++ streams book) stated in a blog post that \"Java and C# are almost identical programming languages. Boring repetition that lacks innovation,\" \"Hardly anybody will claim that Java or C# are revolutionary programming languages that changed the way we write programs,\" and \"C# borrowed a lot from Java - and vice versa. Now that C# supports boxing and unboxing, we'll have a very similar feature in Java.\" Anders Hejlsberg has argued that C# is \"not a Java clone\" and is \"much closer to C++\" in its design.","Since the release of C# 2.0 in November 2005, the C# and Java languages have evolved on increasingly divergent trajectories, becoming somewhat less similar. One of the first major departures came with the addition of generics to both languages, with vastly different implementations. C# makes use of reification to provide \"first-class\" generic objects that can be used like any other class, with code generation performed at class-load time. By contrast, Java's generics are essentially a language syntax feature, and they do not affect the generated byte code, because the compiler performs type erasure on the generic type information after it has verified its correctness.","Furthermore, C# has added several major features to accommodate functional-style programming, culminating in their LINQ extensions released with C# 3.0 and its supporting framework of lambda expressions, extension methods, and anonymous types. These features enable C# programmers to use functional programming techniques, such as closures, when it is advantageous to their application. The LINQ extensions and the functional imports help developers reduce the amount of \"boilerplate\" code that is included in common tasks like querying a database, parsing an xml file, or searching through a data structure, shifting the emphasis onto the actual program logic to help improve readability and maintainability.","C# used to have a mascot called Andy (named after Anders Hejlsberg). It was retired on 29 Jan 2004.","C# was originally submitted for review to the ISO subcommittee JTC 1\/SC 22 under ISO\/IEC 23270:2003, which is now withdrawn. It was then approved under ISO\/IEC 23270:2006.","In the course of its development, the C# language has gone through several versions:","C# has the following syntax:","By design, C# is the programming language that most directly reflects the underlying Common Language Infrastructure\u00a0(CLI)[citation needed]. Most of its intrinsic types correspond to value-types implemented by the CLI framework. However, the language specification does not state the code generation requirements of the compiler: that is, it does not state that a C# compiler must target a Common Language Runtime, or generate Common Intermediate Language (CIL), or generate any other specific format. Theoretically, a C# compiler could generate machine code like traditional compilers of C++ or Fortran.","Some notable features of C# that distinguish it from C and C++ (and Java, where noted) are:","C# has a unified type system. This unified type system is called Common Type System (CTS).","A unified type system implies that all types, including primitives such as integers, are subclasses of the System.Object class. For example, every type inherits a ToString() method.","CTS separates data types into two categories:","Instances of value types do not have referential identity nor referential comparison semantics - equality and inequality comparisons for value types compare the actual data values within the instances, unless the corresponding operators are overloaded. Value types are derived from System.ValueType, always have a default value, and can always be created and copied. Some other limitations on value types are that they cannot derive from each other (but can implement interfaces) and cannot have an explicit default (parameterless) constructor. Examples of value types are all primitive types, such as int (a signed 32-bit integer), float (a 32-bit IEEE floating-point number), char (a 16-bit Unicode code unit), and System.DateTime (identifies a specific point in time with nanosecond precision). Other examples are enum (enumerations) and struct (user defined structures).","In contrast, reference types have the notion of referential identity - each instance of a reference type is inherently distinct from every other instance, even if the data within both instances is the same. This is reflected in default equality and inequality comparisons for reference types, which test for referential rather than structural equality, unless the corresponding operators are overloaded (such as the case for System.String). In general, it is not always possible to create an instance of a reference type, nor to copy an existing instance, or perform a value comparison on two existing instances, though specific reference types can provide such services by exposing a public constructor or implementing a corresponding interface (such as ICloneable or IComparable). Examples of reference types are object (the ultimate base class for all other C# classes), System.String (a string of Unicode characters), and System.Array (a base class for all C# arrays).","Both type categories are extensible with user-defined types.","Boxing is the operation of converting a value of a type of value into a value of a corresponding reference type. Boxing in C# is implicit.","Unboxing is the operation of converting a value of a reference type (previously boxed) into a value of a value type. Unboxing in C# requires an explicit type cast. A boxed object of type T can only be unboxed to a T (or a nullable T).","Example:","Generics were added to version 2.0 of the C# language. Generics use type parameters, which make it possible to design classes and methods that do not specify the type used until the class or method is instantiated. The main advantage is that one can use generic type parameters to create classes and methods that can be used without incurring the cost of runtime casts or boxing operations, as shown here:","C# features \"preprocessor directives\" (though it does not have an actual preprocessor) based on the C preprocessor that allow programmers to define symbols, but not macros. Conditionals such as #if, #endif, and #else are also provided. Directives such as #region give hints to editors for code folding.","C# utilizes a double slash (\/\/) to indicate the rest of the line is a comment. This is inherited from C++.","Multi-line comments can start with slash-asterisk (\/*) and end asterisk-slash (*\/). This is inherited from standard C.","C#'s documentation system is similar to Java's Javadoc, but based on XML. Two methods of documentation are currently supported by the C# compiler.","Single-line documentation comments, such as those commonly found in Visual Studio generated code, are indicated on a line beginning with \/\/\/.","Multi-line documentation comments, while defined in the version 1.0 language specification, were not supported until the .NET 1.1 release. These comments start with slash-asterisk-asterisk (\/**) and end asterisk-slash (*\/).","Note there are some stringent criteria regarding white space and XML documentation when using the slash\/asterisk\/asterisk (\/**) technique.","This code block:","produces a different XML comment from this code block:","Syntax for documentation comments and their XML markup is defined in a non-normative annex of the ECMA C# standard. The same standard also defines rules for processing of such comments, and their transformation to a plain XML document with precise rules for mapping of CLI identifiers to their related documentation elements. This allows any C# IDE or other development tool to find documentation for any symbol in the code in a certain well-defined way.","The C# specification details a minimum set of types and class libraries that the compiler expects to have available. In practice, C# is most often used with some implementation of the Common Language Infrastructure (CLI), which is standardized as ECMA-335 Common Language Infrastructure (CLI).","The following is a very simple C# program, a version of the classic \"Hello world\" example:","The effect is to write the following text to the output console:","Each line has a purpose:","The above line of code tells the compiler to use System as a candidate prefix for types used in the source code. In this case, when the compiler sees use of the Console type later in the source code, it tries to find a type named Console, first in the current assembly, followed by all referenced assemblies. In this case the compiler fails to find such a type, since the name of the type is actually System.Console. The compiler then attempts to find a type named System.Console by using the System prefix from the using statement, and this time it succeeds. The using statement allows the programmer to state all candidate prefixes to use during compilation instead of always using full type names.","Above is a class definition. Everything between the following pair of braces describes Program.","This declares the class member method where the program begins execution. The .NET runtime calls the Main method. (Note: Main may also be called from elsewhere, like any other method, e.g. from another method of Program.) The static keyword makes the method accessible without an instance of Program. Each console application's Main entry point must be declared static. Otherwise, the program would require an instance, but any instance would require a program. To avoid that irresolvable circular dependency, C# compilers processing console applications (like that above) report an error, if there is no static Main method. The void keyword declares that Main has no return value.","This line writes the output. Console is a static class in the System namespace. It provides an interface to the standard input, output, and error streams for console applications. The program calls the Console method WriteLine, which displays on the console a line with the argument, the string \"Hello world!\".","A GUI example:","This example is similar to the previous example, except that it generates a dialog box that contains the message \"Hello world!\" instead of writing it to the console.","In August, 2000, Microsoft Corporation, Hewlett-Packard and Intel Corporation co-sponsored the submission of specifications for C# as well as the Common Language Infrastructure (CLI) to the standards organization Ecma International. In December 2001, ECMA released ECMA-334 C# Language Specification. C# became an ISO standard in 2003 (ISO\/IEC 23270:2003 - Information technology \u2014 Programming languages \u2014 C#). ECMA had previously adopted equivalent specifications as the 2nd edition of C#, in December 2002.","In June 2005, ECMA approved edition 3 of the C# specification, and updated ECMA-334. Additions included partial classes, anonymous methods, nullable types, and generics (similar to C++ templates).","In July 2005, ECMA submitted the standards and related TRs to ISO\/IEC JTC 1 via the latter's Fast-Track process. This process usually takes 6\u20139 months.","The C# language definition and the CLI are standardized under ISO and Ecma standards that provide reasonable and non-discriminatory licensing protection from patent claims. However, Microsoft uses C# and the CLI in its Base Class Library (BCL) that is the foundation of its proprietary .NET framework, and which provides a variety of non-standardized classes (extended I\/O, GUI, Web services, etc.). Some cases where Microsoft patents apply to standards used in the .NET framework are documented by Microsoft and the applicable patents are available on either RAND terms or through Microsoft's Open Specification Promise that releases patent rights to the public, but there is some concern and debate as to whether there are additional aspects patented by Microsoft that are not covered, which may deter independent implementations of the full framework.","Microsoft has agreed not to sue open source developers for violating patents in non-profit projects for the part of the framework that is covered by the OSP. Microsoft has also agreed not to enforce patents relating to Novell products against Novell's paying customers with the exception of a list of products that do not explicitly mention C#, .NET or Novell's implementation of .NET (The Mono Project). However, Novell maintains that Mono does not infringe any Microsoft patents. Microsoft has also made a specific agreement not to enforce patent rights related to the Moonlight browser plugin, which depends on Mono, provided it is obtained through Novell.","In a note posted on the Free Software Foundation's news website in June 2009, Richard Stallman warned that he believes that \"Microsoft is probably planning to force all free C# implementations underground some day using software patents\", and recommended that developers avoid taking what he described as the \"gratuitous risk\" associated with \"depend[ing] on the free C# implementations\". The Free Software Foundation later reiterated its warnings, claiming that the extension of Microsoft Community Promise to the C# and the CLI ECMA specifications would not prevent Microsoft from harming free implementations of C#, because many specific Windows libraries included with .NET or Mono were not covered by this promise.","The reference C# compiler is Microsoft Visual C#.","Other C# compilers exist, often including an implementation of the Common Language Infrastructure and the .NET class libraries up to .NET 2.0:"]}