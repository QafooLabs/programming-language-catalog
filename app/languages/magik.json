{"name":"Magik","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/Magik_(programming_language)","description":["Magik is an object-oriented programming language that supports multiple inheritance, polymorphism and is dynamically typed. It is provided by GE Energy as part of its Smallworld technology platform and was designed from the outset to implement complex applications for enterprise utilities such as power distribution and telecommunications.","Magik (Inspirational Magik) was originally introduced in 1990 and has been improved and updated over the years. Its current version is 4.0 or Magik SF (Small Footprint).","Magik itself shares some similarities with Smalltalk in terms of its language features and its architecture: the Magik language is compiled into byte codes interpreted by the Magik virtual machine. The Magik virtual machine is available on several platforms including Microsoft Windows, various flavours of Unix and Linux.","Magik is console based and code can be modified on the fly even when an application is running. The console can also be used to execute Magik code and to see the results.","Compiled code is stored in a single file called an image file. Each image file holds the compiled byte-codes and the state of the session (for example variable values) when the image was last saved.","Magik uses the # token to mark sections of code as comments:","Magik uses the ","For clarity, this notation is read as \"A becomes 1.234\" or \"b becomes b plus a\". This terminology separates assignment from comparison.","Magik also supports a compressed variation of this operator that works in a similar way to those found in C:","To print a variable you can use the following command","As well as conventional data types such as integers, floats and strings Magik also implements symbols. Symbols are a special token data type that are used extensively throughout Magik to uniquely identify objects. They are represented by a colon followed by a string of characters. Symbols can be escaped using the vertical bar character. For example:","Magik variables are not typed as they are in say C# and can reference different objects at runtime. Everything in Magik is an object (there is no distinction between objects and primitive types such as integers):","Objects are implemented in Magik using exemplars. Exemplars have similarities to classes in other programming languages such as Java, but with important differences. Magik supports multiple inheritance, and mixins (which implement functionality with no data). New instances are made by cloning an existing instance (which will typically be the exemplar but does not have to be).","New exemplars are created using the statement def_slotted_exemplar(), for example:","This code fragment will define a new exemplar called my_object that has two slots (or fields) called slot_a (pre-initialized to 34) and slot_b (pre-initialised to \"hello\") that inherits from two existing exemplars called parent_object_a and parent_object_b.","Magik implements all usual logical operators (=, =, ~=\/) for comparison, as well as a few unusual ones. The _is and _isnt operators are used for comparing specific instances of objects, or object references rather than values.","For example:","Methods are defined on exemplars using the statements _method and _endmethod:","It is convention to supply two methods new() (to create a new instance) and init() (to initialize an instance).","The _clone creates a physical copy of the person object. The _super statement allows objects to invoke an implementation of a method on the parent exemplar. Objects can reference themselves using the _self statement. An object's slots are accessed and assigned using a dot notation.","Methods that are not part of the public interface of the object can be marked private using the _private statement. Private methods can only be called by _self, _super and _clone.","Optional arguments can be declared using the _optional statement. Optional arguments that are not passed are assigned by Magik to the special object _unset (the equivalent of null). The _gather statement can be used to declare a list of optional arguments.","In Magik the _for, _over, _loop and _endloop statements allow iteration.","Here values.elements() is an iterator which helps to iterate the values.","In Magik generator methods are called iterator methods. New iterator methods can be defined using the _iter and _loopbody statements:","Magik also supports functions called procedures. Procedures are also objects and are declared using the _proc and _endproc statements. Procedures are assigned to variables which may then be invoked:","Because Magik was originally developed in England, methods in the core smallworld libraries are spelled using British English. For example:","Like other programming language Magik too has collections. They include the following:","The following is an example of the Hello world program written in Magik:"]}