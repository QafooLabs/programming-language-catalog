{"name":"ABAP","aliases":[],"wiki":"http:\/\/en.wikipedia.org\/wiki\/ABAP","description":["ABAP (Advanced Business Application Programming, originally Allgemeiner Berichts-Aufbereitungs-Prozessor, German for \"general report creation processor\") is a high-level programming language created by the German software company SAP. It is currently positioned, alongside the more recently introduced Java, as the language for programming the SAP Application Server, part of its NetWeaver platform for building business applications. The syntax of ABAP is somewhat similar to COBOL.[opinion][citation needed]","ABAP is one of the many application-specific fourth-generation languages (4GLs) first developed in the 1980s. It was originally the report language for SAP R\/2, a platform that enabled large corporations to build mainframe business applications for materials management and financial and management accounting.","ABAP used to be an abbreviation of Allgemeiner BerichtsAufbereitungsProzessor, German for \"generic report preparation processor\", but was later renamed to the English Advanced Business Application Programming. ABAP was one of the first languages to include the concept of Logical Databases (LDBs), which provides a high level of abstraction from the basic database level(s).","The ABAP programming language was originally used by developers to develop the SAP R\/3 platform. It was also intended to be used by SAP customers to enhance SAP applications \u2013 customers can develop custom reports and interfaces with ABAP programming. The language is fairly easy to learn[opinion] for programmers but it is not a tool for direct use by non-programmers. Knowledge of relational database design and preferably also of object-oriented concepts is necessary to create ABAP programs.","ABAP remains as the language for creating programs for the client-server R\/3 system, which SAP first released in 1992. As computer hardware evolved through the 1990s, more and more of SAP's applications and systems were written in ABAP. By 2001, all but the most basic functions were written in ABAP. In 1999, SAP released an object-oriented extension to ABAP called ABAP Objects, along with R\/3 release 4.6.","SAP's current development platform NetWeaver supports both ABAP and Java.","","All ABAP programs reside inside the SAP database. They are not stored in separate external files like Java or C++ programs. In the database all ABAP code exists in two forms: source code, which can be viewed and edited with the ABAP Workbench tools; and generated code, a binary representation somewhat comparable with Java bytecode. ABAP programs execute under the control of the runtime system, which is part of the SAP kernel. The runtime system is responsible for processing ABAP statements, controlling the flow logic of screens and responding to events (such as a user clicking on a screen button); in this respect it can be seen as a Virtual Machine comparable with the Java VM. A key component of the ABAP runtime system is the Database Interface, which turns database-independent ABAP statements (\"Open SQL\") into statements understood by the underlying DBMS (\"Native SQL\"). The database interface handles all the communication with the relational database on behalf of ABAP programs; it also contains extra features such as buffering of tables and frequently accessed data in the local memory of the application server.","The ABAP language environment, including the syntax checking, code generation, and runtime system, is part of the SAP Basis component\/layer. SAP Basis is the technological platform that supports the entire range of SAP applications, now typically implemented in the framework of the SAP Web Application Server. In that sense SAP Basis can be seen as the virtual machine on which SAP applications run. Like any operating system, SAP Basis contains both low-level services (for example memory management, database communication, or servicing Web requests) and high-level tools for end users and administrators. These tools can be executables (\"SAP kernel\") running directly on the underlying operating system, transactions developed in ABAP, or Web-based programs.","SAP Basis also provides a layer of abstraction between the business applications and the operating system and database. This ensures that applications do not depend directly upon a specific server or database platform and can easily be ported from one platform to another.","SAP Basis currently runs on UNIX (AIX, HP-UX, Solaris, Linux), Microsoft Windows, i5\/OS on IBM System i (formerly iSeries, AS\/400), and z\/OS on IBM System z (formerly zSeries, S\/390). Supported databases are IBM DB2, Informix, MaxDB, Oracle, and Microsoft SQL Server (support for Informix was discontinued in SAP Basis release 7.00).","All SAP data exists and all SAP software runs in the context of a SAP system. A system consists of a central relational database and one or more application servers (\"instances\") accessing the data and programs in this database. A SAP system contains at least one instance but may contain more, mostly for reasons of sizing and performance. In a system with multiple instances, load balancing mechanisms ensure that the load is spread evenly over the available application servers.","Installations of the Web Application Server (landscapes) typically consist of three systems: one for development; one for testing and quality assurance; and one for production. The landscape may contain more systems (e.g., separate systems for unit testing and pre-production testing) or it may contain fewer (e.g., only development and production, without separate QA); nevertheless three is the most common configuration. ABAP programs are created and undergo first testing in the development system. Afterwards they are distributed to the other systems in the landscape. These actions take place under control of the Change and Transport System (CTS), which is responsible for concurrency control (e.g., preventing two developers from changing the same code at the same time), version management, and deployment of programs on the QA and production systems.","The Web Application Server consists of three layers: the database layer; the application layer; and the presentation layer. These layers may run on the same or on different physical machines. The database layer contains the relational database and the database software. The application layer knowledge contains the instance or instances of the system. All application processes, including the business transactions and the ABAP development, run on the application layer. The presentation layer handles the interaction with users of the system. Online access to ABAP application servers can go via a proprietary graphical interface, which is called \"SAP GUI\", or via a Web browser.","A transaction in SAP terminology is the execution of a program. The normal way of executing ABAP code in the SAP system is by entering a transaction code (for instance, VA01 is the transaction code for \"Create Sales Order\"). Transactions can be called via system-defined or user-specific, role-based menus. They can also be started by entering the transaction code directly into a command field, which is present in every SAP screen. Transactions can also be invoked programmatically by means of the ABAP statements CALL TRANSACTION and LEAVE TO TRANSACTION.","The term \"transaction\" must not be misunderstood here; in the context just described, a transaction simply means calling and executing an ABAP program. In application programming, \"transaction\" often refers to an indivisible operation on data, which is either committed as a whole or undone (rolled back) as a whole. This concept exists in SAP and is called a LUW (Logical Unit of Work). In the course of one transaction (program execution), there can be different LUWs. Transaction for ABAP Workbench could be invoked using transaction code SE80 to work on all ABAP related activities.[citation needed]","As in other programming languages, an ABAP program is either an executable unit or a library, which provides reusable code to other programs and is not independently executable.","ABAP distinguishes two types of executable programs:","Reports follow a relatively simple programming model whereby a user optionally enters a set of parameters (e.g., a selection over a subset of data) and the program then uses the input parameters to produce a report in the form of an interactive list. The term \"report\" can be somewhat misleading in that reports can also be designed to modify data; the reason why these programs are called reports is the \"list-oriented\" nature of the output they produce.","Module pools define more complex patterns of user interaction using a collection of screens. The term \u201cscreen\u201d refers to the actual, physical image that the user sees. Each screen also has a \"flow logic\", which refers to the ABAP code implicitly invoked by the screens. Each screen has its own flow logic, which is divided into a \"PBO\" (Process Before Output) and \"PAI\" (Process After Input) section. In SAP documentation the term \u201cdynpro\u201d (dynamic program) refers to the combination of the screen and its flow logic.","The non-executable program types are:","An INCLUDE module gets included at generation time into the calling unit; it is often used to subdivide very large programs. Subroutine pools contain ABAP subroutines (blocks of code enclosed by FORM\/ENDFORM statements and invoked with PERFORM). Function groups are libraries of self-contained function modules (enclosed by FUNCTION\/ENDFUNCTION and invoked with CALL FUNCTION). Object classes and interfaces are similar to Java classes and interfaces; the first define a set of methods and attributes, the second contain \"empty\" method definitions, for which any class implementing the interface must provide explicit code. Type pools define collections of data types and constants.","The ABAP Workbench contains different tools for editing programs. The most important of these are (transaction codes are shown in parentheses):","The Object Navigator (transaction SE80) provides a single integrated interface into these various tools.","The ABAP Dictionary contains all metadata about the data in the SAP system. It is closely linked with the ABAP Workbench in that any reference to data (e.g., a table, a view, or a data type) will be obtained from the dictionary. Developers use the ABAP Dictionary transactions (directly or through the SE80 Object Navigator inside the ABAP Workbench) to display and maintain this metadata.","When a dictionary object is changed, a program that references the changed object will automatically reference the new version the next time the program runs. Because ABAP is interpreted, it is not necessary to recompile programs that reference changed dictionary objects.","A brief description of the most important types of dictionary objects follows:","","This brief description of the ABAP syntax begins inevitably with the ubiquitous \"Hello World\" program.","This example contains two statements: REPORT and WRITE. The program displays a list on the screen. In this case, the list consists of the single line \"Hello World\". The REPORT statement indicates that this program is a report. An alternative statement, PROGRAM, would be used for a module pool.","The basic formatting rules of ABAP are simple:","The \"Hello World\" program could be legally rewritten as follows:","To ensure that code is readable, the ABAP editor provides a \"Pretty Printer\" function, which takes care of proper indentation. The Pretty Printer also offers a choice between several models of case standardization (all upper case, all lower case, upper case for statements\/keywords, upper case for variable names).","If a text literal in an ABAP statement extends across more than one line, then a \u2018&\u2019 character must be used to combine a succession of text literals into a single one. Example:","The rule that tokens must be separated by at least one space extends even to operators, parentheses and other symbols. For example the following code is incorrect:","The variable names (X, A, B, C), the numeric constant 2, the operators \"=\", \"+\" and \"-\" and the parentheses must all be white-space delimited. The correct code is:","Consecutive statements with an identical first (leftmost) part can be combined into a \"chained\" statement using the chain operator \":\" (colon). The common part of the statements is written to the left of the colon, the differing parts are written to the right of the colon and separated by commas. The colon operator is attached directly to the preceding token, without a space (the same applies to the commas in the token list on , as can be seen in the examples below).","Chaining is very often used in WRITE statements. WRITE accepts just one argument, so if for instance you wanted to display three fields from a structure called FLIGHTINFO, you would have to code:","Chaining the statements results in a more readable and more intuitive form:","In a chain statement, the first part (before the colon) is not limited to the statement name alone. The entire common part of the consecutive statements can be placed before the colon. Example:","could be rewritten in chained form as:","ABAP has 2 ways of defining text as a comment:","Example:","ABAP provides a set of built-in data types. In addition, every structure, table, view or data element defined in the ABAP Dictionary can be used to type a variable. Also, object classes and interfaces can be used as types.","The built-in data types are:","Date variables or constants (type D) contain the number of days since January 1, AD 1. Time variables or constants (type T) contain the number of seconds since midnight. A special characteristic of both types is that they can be accessed both as integers and as character strings (with internal format \"YYYYMMDD\" for dates and \"hhmmss\" for times), which makes date\/time handling very easy. For example, the code snippet below calculates the last day of the previous month (note: SY-DATUM is a system-defined variable containing the current date):","All ABAP variables must be explicitly declared in order to be used. Normally all declarations are placed at the top of the code module (program, subroutine, function) before the first executable statement; this placement is a convention and not an enforced syntax rule. The declaration consists of the name, type, length (where applicable), additional modifiers (e.g. the number of implied decimals for a packed decimal field) and optionally an initial value:","Notice the use of the colon to chain together consecutive DATA statements.","The ABAP language supports object-oriented programming, through a feature known as \"ABAP Objects\". This helps to simplify applications and make them more controllable.","ABAP Objects is fully compatible with the existing language, so one can use existing statements and modularization units in programs that use ABAP Objects, and can also use ABAP Objects in existing ABAP programs. Syntax checking is stronger in ABAP Objects programs, and some syntactical forms (usually older ones) of certain statements are not permitted.","In contrast with languages like C\/C++ or Java, which define a limited set of language-specific statements and provide most functionality via libraries, ABAP contains an extensive body of built-in statements. These statements often support many options, which explains why ABAP programs look \"verbose\", especially when compared with programs written in C, C++ or Java.","This section lists some of the most important statements in the language, subdivided by function. Both the statements listed here and the subdivision used are fairly arbitrary and by no means exhaustive.","These statements define data types or declare data objects which are used by the other statements in a program or routine. The collected declarative statements in a program or routine make up its declaration part.","Examples of declarative statements:","These statements define the processing blocks in an ABAP program.","The modularization statements can be further divided into event statements and defining statements:","Event statements","These are used to define the beginning of event processing blocks. There are no special statements to mark the end of such blocks - they end when the next processing block is introduced.","Examples of event keywords are:","Defining statements","These statements delineate callable code units such as subroutines, function modules and methods. The statement marking the end of the unit has the name of the opening statement prefixed with \"END\".","Examples of defining keywords:","These statements control the flow of the program within a processing block.","Statements controlling conditional execution are:","The CHECK statement verifies a condition and exits the current processing block (e.g. loop or subroutine) if the condition is not satisfied.","Several statements exist to define a loop:","DO\/ENDDO defines an unconditional loop. An exit condition (typically in the form \"IF . EXIT. ENDIF.\") must be provided inside the body of the loop. A variant (DO  TIMES) sets as exit condition the number of times the loop body is executed. WHILE\/ENDWHILE defines a conditional loop. The condition is tested at the beginning of the loop. LOOP\/ENDLOOP loops over the lines of an internal table. The loop ends after processing the last line of the internal table.","These statements call processing blocks defined using the corresponding modularization statements. The blocks can either be in the same ABAP program or in a different program.","Examples of call keywords:","These statements retrieve or modify the contents of variables.","A first group of operational statements assign or change a variable:","These statements, whose syntax originates in COBOL, can be written in a shorter form that uses operators rather than keywords:","Examples of operational statements on character strings:","Database access statements (Open SQL):","Statements working on internal tables (notice that some \"SQL\" statements can also be used here):","These statements produce or format output. They appear mainly in reports, less so in module pools. Examples are:","Internal tables are an extremely important feature of the ABAP language. An internal table is defined as a vector of structs in C++ or a vector of objects in Java. The main difference with these languages is that ABAP provides a collection of statements to easily access and manipulate the contents of internal tables. Note that ABAP does not support arrays; the only way to define a multi-element data object is to use an internal table.[citation needed]"]}